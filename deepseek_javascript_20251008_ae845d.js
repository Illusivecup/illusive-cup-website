// js/services/firebase-service.js
import AppConfig from '../config/app-config.js';
import ErrorHandler from '../utils/error-handler.js';
import PerformanceOptimizer from '../utils/performance-optimizer.js';

export class FirebaseService {
    constructor() {
        this.app = null;
        this.database = null;
        this.isConnected = false;
        this.connectionListeners = new Set();
        this.retryCount = 0;
        this.maxRetries = 3;
    }

    async initialize() {
        try {
            if (this.app) {
                console.log('üî• Firebase —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                return;
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
            this.app = firebase.initializeApp(AppConfig.FIREBASE_CONFIG);
            this.database = firebase.database();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            this.setupConnectionMonitoring();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await this.testConnection();
            
            console.log('‚úÖ Firebase Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:', error);
            ErrorHandler.showNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
                message: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ'
            });
            throw error;
        }
    }

    setupConnectionMonitoring() {
        const connectedRef = this.database.ref('.info/connected');
        
        connectedRef.on('value', (snapshot) => {
            const connected = snapshot.val() === true;
            this.handleConnectionChange(connected);
        });

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Ç–µ—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.database.ref('.info/connected').on('value', (snapshot) => {
            if (snapshot.val() === false) {
                this.handleDisconnection();
            }
        });
    }

    handleConnectionChange(connected) {
        const previousState = this.isConnected;
        this.isConnected = connected;

        if (connected && !previousState) {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            this.retryCount = 0;
        } else if (!connected && previousState) {
            console.warn('‚ùå –ü–æ—Ç–µ—Ä—è–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase');
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        this.connectionListeners.forEach(listener => {
            try {
                listener(connected, previousState);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            }
        });
    }

    handleDisconnection() {
        this.retryCount++;
        
        if (this.retryCount <= this.maxRetries) {
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.retryCount}/${this.maxRetries}`);
        } else {
            ErrorHandler.showNotification({
                type: 'warning',
                title: '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º',
                message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ'
            });
        }
    }

    async testConnection() {
        try {
            const testRef = this.database.ref('connection_test');
            await testRef.set({ timestamp: Date.now() });
            await testRef.remove();
            return true;
        } catch (error) {
            console.error('‚ùå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:', error);
            return false;
        }
    }

    onConnectionChange(callback) {
        this.connectionListeners.add(callback);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
        return () => {
            this.connectionListeners.delete(callback);
        };
    }

    // –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    async get(path) {
        try {
            const snapshot = await this.database.ref(path).once('value');
            return snapshot.val();
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ ${path}:`, error);
            throw error;
        }
    }

    async set(path, data) {
        try {
            await this.database.ref(path).set(data);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ ${path}:`, error);
            throw error;
        }
    }

    async update(path, updates) {
        try {
            await this.database.ref(path).update(updates);
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${path}:`, error);
            throw error;
        }
    }

    async push(path, data) {
        try {
            const ref = this.database.ref(path).push();
            await ref.set(data);
            return ref.key;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ ${path}:`, error);
            throw error;
        }
    }

    async remove(path) {
        try {
            await this.database.ref(path).remove();
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${path}:`, error);
            throw error;
        }
    }

    // –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–µ
    subscribe(path, callback, options = {}) {
        const {
            once = false,
            errorHandler = null
        } = options;

        const ref = this.database.ref(path);
        
        const eventType = once ? 'once' : 'on';
        const handler = ref[eventType]('value', 
            (snapshot) => {
                PerformanceOptimizer.trackMetric(`firebase_subscription_${path}`, Date.now());
                callback(snapshot.val(), snapshot);
            },
            (error) => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${path}:`, error);
                if (errorHandler) {
                    errorHandler(error);
                } else {
                    ErrorHandler.showNotification({
                        type: 'error',
                        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö',
                        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ ${path}`
                    });
                }
            }
        );

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
        return () => {
            ref.off('value', handler);
        };
    }

    subscribeChild(path, callback, eventType = 'child_added') {
        const ref = this.database.ref(path);
        
        const handler = ref.on(eventType, 
            (snapshot) => {
                callback(snapshot.val(), snapshot.key, snapshot);
            },
            (error) => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –¥–µ—Ç–µ–π ${path}:`, error);
            }
        );

        return () => {
            ref.off(eventType, handler);
        };
    }

    // –ü–∞–∫–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    async batchSet(updates) {
        try {
            await this.database.ref().update(updates);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏:', error);
            throw error;
        }
    }

    // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    async transaction(path, transactionUpdate) {
        try {
            const result = await this.database.ref(path).transaction(transactionUpdate);
            return result;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ ${path}:`, error);
            throw error;
        }
    }

    // –û—Ñ—Ñ–ª–∞–π–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    enableOfflinePersistance() {
        try {
            firebase.database().setPersistenceEnabled(true);
            console.log('‚úÖ –í–∫–ª—é—á–µ–Ω–æ –æ—Ñ—Ñ–ª–∞–π–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ');
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—Ñ—Ñ–ª–∞–π–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', error);
        }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
    async validateWriteAccess(path) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        try {
            const testRef = this.database.ref(`${path}/_write_test`);
            await testRef.set({ test: Date.now() });
            await testRef.remove();
            return true;
        } catch (error) {
            console.error(`‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ ${path}:`, error);
            return false;
        }
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    generateId() {
        return this.database.ref().push().key;
    }

    getTimestamp() {
        return firebase.database.ServerValue.TIMESTAMP;
    }

    // –û—á–∏—Å—Ç–∫–∞
    destroy() {
        if (this.app) {
            this.connectionListeners.clear();
            this.app.delete();
            this.app = null;
            this.database = null;
            console.log('üî• Firebase Service —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const firebaseService = new FirebaseService();

export default FirebaseService;