// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø FIREBASE ===
const firebaseConfig = {
    apiKey: "AIzaSyAjUojB-m0TdI604jwsIXGOHGLdGBmC64",
    authDomain: "illusive-cup.firebaseapp.com",
    databaseURL: "https://illusive-cup-default-rtdb.europe-west1.firebasedatabase.app",
    projectId: "illusive-cup",
    storageBucket: "illusive-cup.firebasestorage.app",
    messagingSenderId: "465786550229",
    appId: "1:465786550229:web:9a1d4a3015bbcb8a3ca75c"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
try {
    firebase.initializeApp(firebaseConfig);
    console.log('üî• Firebase –ø–æ–¥–∫–ª—é—á–µ–Ω!');
} catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ Firebase:', error);
}

const database = firebase.database();

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
let isEditor = false;
let currentEditingTeamId = null;
let teamsData = {};
let currentDisplayedTeamId = null;

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï ===
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

async function initializeApp() {
    createAnimatedBackground();
    initializeEventListeners();
    checkEditorAccess();
    setupRealTimeListeners();
    loadInitialData();
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô ===
function initializeEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    document.getElementById('teamsDropdownBtn').addEventListener('click', toggleDropdown);
    document.getElementById('bracketBtn').addEventListener('click', showBracket);
    document.getElementById('scheduleBtn').addEventListener('click', showSchedule);
    
    // –ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.getElementById('closeEditTeamModal').addEventListener('click', closeEditTeamModal);
    document.getElementById('closeAdminPanel').addEventListener('click', closeAdminPanel);
    document.getElementById('addPlayerBtn').addEventListener('click', addPlayerField);
    document.getElementById('saveTeamBtn').addEventListener('click', saveTeamChanges);
    document.getElementById('cancelEditTeamBtn').addEventListener('click', closeEditTeamModal);
    
    // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    const adminBtn = document.getElementById('adminBtn');
    if (adminBtn) {
        adminBtn.addEventListener('click', showAdminPanel);
    }
    document.getElementById('updateTeamsBtn').addEventListener('click', updateTeamsSettings);
    document.getElementById('saveBracketBtn').addEventListener('click', saveBracketChanges);
    document.getElementById('saveScheduleBtn').addEventListener('click', saveScheduleChanges);
    document.getElementById('addScheduleMatchBtn').addEventListener('click', addScheduleMatch);
    
    // –¢–∞–±—ã –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            openAdminTab(this.getAttribute('data-tab'));
        });
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
    document.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal')) {
            event.target.classList.add('hidden');
        }
    });
}

// === –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –†–ï–î–ê–ö–¢–û–†–ê ===
function checkEditorAccess() {
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('editor') === 'true') {
        isEditor = true;
        document.getElementById('adminBtn').classList.remove('hidden');
        console.log('üëë –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    }
}

// === –°–û–ó–î–ê–ù–ò–ï –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–û–ì–û –§–û–ù–ê ===
function createAnimatedBackground() {
    const bg = document.getElementById('animatedBg');
    const particleCount = 15;
    
    for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.classList.add('particle');
        
        const size = Math.random() * 10 + 5;
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        particle.style.left = `${Math.random() * 100}%`;
        particle.style.animationDelay = `${Math.random() * 20}s`;
        particle.style.animationDuration = `${15 + Math.random() * 10}s`;
        
        bg.appendChild(particle);
    }
}

// === REAL-TIME –°–õ–£–®–ê–¢–ï–õ–ò FIREBASE ===
function setupRealTimeListeners() {
    // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –∫–æ–º–∞–Ω–¥
    database.ref('teams').on('value', (snapshot) => {
        teamsData = snapshot.val() || {};
        console.log('üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã:', teamsData);
        updateTeamsDropdown();
        updateConnectionStatus(true);
        
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        if (Object.keys(teamsData).length === 0) {
            createDemoData();
        }
    }, (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥:', error);
        updateConnectionStatus(false);
    });

    // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
    database.ref('bracket').on('value', (snapshot) => {
        const bracketData = snapshot.val();
        console.log('üì• –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç–∫–∞:', bracketData);
        displayBracket(bracketData);
    });

    // –°–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    database.ref('schedule').on('value', (snapshot) => {
        const scheduleData = snapshot.val();
        console.log('üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:', scheduleData);
        displaySchedule(scheduleData);
    });
}

// === –°–û–ó–î–ê–ù–ò–ï –î–ï–ú–û-–î–ê–ù–ù–´–• ===
function createDemoData() {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...');
    
    const demoTeams = {
        team1: {
            name: "DRAGON SLAYERS",
            slogan: "–û–≥–Ω–µ–Ω–Ω—ã–µ –ø–æ–±–µ–¥—ã!",
            mmr: 4500,
            players: [
                { name: "Shadow", role: "–ö–∞–ø–∏—Ç–∞–Ω" },
                { name: "Blaze", role: "–ö–µ—Ä—Ä–∏" },
                { name: "Frost", role: "–ú–∏–¥–µ—Ä" },
                { name: "Storm", role: "–°–∞–ø–ø–æ—Ä—Ç" },
                { name: "Stone", role: "–û—Ñ—Ñ–ª–µ–π–Ω–µ—Ä" }
            ]
        },
        team2: {
            name: "NIGHT WOLVES", 
            slogan: "–û—Ö–æ—Ç–∏–º—Å—è –Ω–æ—á—å—é!",
            mmr: 4200,
            players: [
                { name: "Alpha", role: "–ö–∞–ø–∏—Ç–∞–Ω" },
                { name: "Luna", role: "–ö–µ—Ä—Ä–∏" },
                { name: "Fang", role: "–ú–∏–¥–µ—Ä" },
                { name: "Howl", role: "–°–∞–ø–ø–æ—Ä—Ç" },
                { name: "Claw", role: "–û—Ñ—Ñ–ª–µ–π–Ω–µ—Ä" }
            ]
        },
        team3: {
            name: "THUNDER GUARDIANS",
            slogan: "–ú–æ–ª–Ω–∏—è –≤ –Ω–∞—à–∏—Ö —Ä—É–∫–∞—Ö!",
            mmr: 4700,
            players: [
                { name: "Volt", role: "–ö–∞–ø–∏—Ç–∞–Ω" },
                { name: "Spark", role: "–ö–µ—Ä—Ä–∏" },
                { name: "Bolt", role: "–ú–∏–¥–µ—Ä" },
                { name: "Flash", role: "–°–∞–ø–ø–æ—Ä—Ç" },
                { name: "Surge", role: "–û—Ñ—Ñ–ª–µ–π–Ω–µ—Ä" }
            ]
        }
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ-–∫–æ–º–∞–Ω–¥—ã –≤ Firebase
    database.ref('teams').set(demoTeams);
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Å–µ—Ç–∫—É
    const demoBracket = {
        quarterfinals: [
            { team1: "DRAGON SLAYERS", team2: "NIGHT WOLVES", score1: 2, score2: 1 },
            { team1: "THUNDER GUARDIANS", team2: "TEAM 4", score1: 2, score2: 0 }
        ],
        semifinals: [
            { team1: "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å 1/4", team2: "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å 1/4", score1: null, score2: null }
        ],
        final: [
            { team1: "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å 1/2", team2: "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å 1/2", score1: null, score2: null }
        ]
    };
    
    database.ref('bracket').set(demoBracket);
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    const demoSchedule = [
        { time: "15:00", match: "DRAGON SLAYERS vs NIGHT WOLVES", stage: "–ß–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª" },
        { time: "17:00", match: "THUNDER GUARDIANS vs TEAM 4", stage: "–ß–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª" },
        { time: "19:00", match: "–ü–æ–ª—É—Ñ–∏–Ω–∞–ª 1", stage: "–ü–æ–ª—É—Ñ–∏–Ω–∞–ª" },
        { time: "21:00", match: "–ì–†–ê–ù–î-–§–ò–ù–ê–õ", stage: "–§–∏–Ω–∞–ª" }
    ];
    
    database.ref('schedule').set(demoSchedule);
}

// === –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===
function updateConnectionStatus(connected) {
    const status = document.getElementById('connectionStatus');
    const dot = status.querySelector('.status-dot');
    const text = status.querySelector('.status-text');
    
    if (connected) {
        dot.classList.add('connected');
        text.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ç—É—Ä–Ω–∏—Ä—É';
    } else {
        dot.classList.remove('connected');
        text.textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
    }
}

// === –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–´–ü–ê–î–ê–Æ–©–ï–ì–û –°–ü–ò–°–ö–ê –ö–û–ú–ê–ù–î ===
function updateTeamsDropdown() {
    const dropdown = document.getElementById('teamsDropdown');
    dropdown.innerHTML = '';
    
    Object.keys(teamsData).forEach(teamId => {
        const team = teamsData[teamId];
        const link = document.createElement('a');
        link.textContent = team.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        link.addEventListener('click', () => showTeamCard(teamId));
        dropdown.appendChild(link);
    });
}

// === –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ö–ê–†–¢–û–ß–ö–ò –ö–û–ú–ê–ù–î–´ (–û–î–ù–û–ô) ===
function showTeamCard(teamId) {
    const container = document.getElementById('teamsContent');
    container.innerHTML = '';
    
    const team = teamsData[teamId];
    if (team) {
        const card = createTeamCard(teamId, team);
        container.appendChild(card);
        currentDisplayedTeamId = teamId;
    }
    
    showTeams();
    toggleDropdown(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
}

// === –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –í–°–ï–• –ö–ê–†–¢–û–ß–ï–ö –ö–û–ú–ê–ù–î ===
function displayTeamsCards() {
    const container = document.getElementById('teamsContent');
    container.innerHTML = '';
    currentDisplayedTeamId = null;
    
    Object.keys(teamsData).forEach(teamId => {
        const team = teamsData[teamId];
        const card = createTeamCard(teamId, team);
        container.appendChild(card);
    });
}

// === –°–û–ó–î–ê–ù–ò–ï –ö–ê–†–¢–û–ß–ö–ò –ö–û–ú–ê–ù–î–´ (–ù–û–í–ê–Ø –í–ï–†–°–ò–Ø –° –ê–ù–ò–ú–ê–¶–ò–ï–ô) ===
function createTeamCard(teamId, team) {
    const card = document.createElement('div');
    card.className = 'team-visiting-card';
    card.setAttribute('data-team-id', teamId);
    
    const playersHTML = (team.players || []).map((player, index) => `
        <div class="player-card-bublas">
            <div class="player-role-bublas">${player.role || '–ò–≥—Ä–æ–∫'}</div>
            <div class="player-name-bublas">${player.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
        </div>
    `).join('');
    
    const editButton = isEditor ? 
        `<button class="edit-team-btn" data-team-id="${teamId}">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>` : '';
    
    card.innerHTML = `
        <div class="card-header">
            <div class="header-highlight"></div>
            <div class="team-name-bublas">${team.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</div>
            <div class="team-subtitle">${team.slogan || '–ì–æ—Ç–æ–≤—ã –∫ –ø–æ–±–µ–¥–µ!'}</div>
        </div>
        <div class="team-card-content">
            <div class="players-section-bublas">
                <div class="section-title-bublas">–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã</div>
                <div class="player-grid-bublas">
                    ${playersHTML}
                </div>
            </div>
            <div class="stats-section-bublas">
                <div class="mmr-display-bublas">
                    <div class="mmr-label-bublas">–°—Ä–µ–¥–Ω–∏–π MMR</div>
                    <div class="mmr-value-bublas">${team.mmr || '0'}</div>
                </div>
                <div class="tournament-section-bublas">
                    <div class="tournament-text-bublas">–∏–≥—Ä–∞–µ–º –Ω–∞</div>
                    <div class="tournament-badge-bublas">Illusive Cup</div>
                </div>
            </div>
        </div>
        <div class="team-footer-bublas">
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
            ${editButton}
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (isEditor) {
        const editBtn = card.querySelector('.edit-team-btn');
        editBtn.addEventListener('click', () => editTeam(teamId));
    }
    
    return card;
}

// === –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –¢–£–†–ù–ò–†–ù–û–ô –°–ï–¢–ö–ò ===
function displayBracket(bracketData) {
    const container = document.getElementById('bracketContainer');
    
    if (!bracketData) {
        container.innerHTML = '<p>–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞</p>';
        return;
    }
    
    let bracketHTML = '';
    
    Object.keys(bracketData).forEach(round => {
        bracketHTML += `
            <div class="bracket-round">
                <h3>${getRoundName(round)}</h3>
                ${bracketData[round].map(match => `
                    <div class="match ${round === 'final' ? 'final' : ''}">
                        <div>${match.team1 || 'TBD'}</div>
                        <div>${match.score1 !== null ? match.score1 : '?'} - ${match.score2 !== null ? match.score2 : '?'}</div>
                        <div>${match.team2 || 'TBD'}</div>
                    </div>
                `).join('')}
            </div>
        `;
    });
    
    container.innerHTML = bracketHTML;
}

// === –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ê–°–ü–ò–°–ê–ù–ò–Ø ===
function displaySchedule(scheduleData) {
    const container = document.getElementById('scheduleList');
    
    if (!scheduleData || scheduleData.length === 0) {
        container.innerHTML = '<p>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –ø–æ–∫–∞ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ</p>';
        return;
    }
    
    container.innerHTML = scheduleData.map(match => `
        <div class="match-slot">
            <div class="time">${match.time}</div>
            <div class="teams">${match.match}</div>
            <div class="court">${match.stage}</div>
        </div>
    `).join('');
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
function getRoundName(round) {
    const roundNames = {
        'quarterfinals': '–ß–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª—ã',
        'semifinals': '–ü–æ–ª—É—Ñ–∏–Ω–∞–ª—ã', 
        'final': '–§–∏–Ω–∞–ª'
    };
    return roundNames[round] || round;
}

// === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===
function toggleDropdown() {
    document.querySelector('.dropdown').classList.toggle('active');
}

function showTeams() {
    hideAllSections();
    document.getElementById('teamsContent').classList.remove('hidden');
    
    // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
    if (!currentDisplayedTeamId) {
        displayTeamsCards();
    }
}

function showBracket() {
    hideAllSections();
    document.getElementById('bracketContent').classList.remove('hidden');
    currentDisplayedTeamId = null;
}

function showSchedule() {
    hideAllSections();
    document.getElementById('scheduleContent').classList.remove('hidden');
    currentDisplayedTeamId = null;
}

function hideAllSections() {
    document.querySelectorAll('.content-section').forEach(section => {
        section.classList.add('hidden');
    });
}

// === –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ===
function showAdminPanel() {
    document.getElementById('adminPanel').classList.remove('hidden');
    updateAdminTeamsList();
}

function closeAdminPanel() {
    document.getElementById('adminPanel').classList.add('hidden');
}

function openAdminTab(tabName) {
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('active'));
    
    document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
    document.getElementById(tabName).classList.add('active');
}

function updateAdminTeamsList() {
    const container = document.getElementById('adminTeamsList');
    container.innerHTML = '';
    
    Object.keys(teamsData).forEach(teamId => {
        const team = teamsData[teamId];
        const teamItem = document.createElement('div');
        teamItem.className = 'team-admin-item';
        teamItem.innerHTML = `
            <span>${team.name}</span>
            <button class="edit-team-btn" data-team-id="${teamId}">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
        `;
        
        teamItem.querySelector('.edit-team-btn').addEventListener('click', () => editTeam(teamId));
        container.appendChild(teamItem);
    });
}

// === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î ===
function editTeam(teamId) {
    console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:', teamId);
    currentEditingTeamId = teamId;
    const team = teamsData[teamId];
    
    document.getElementById('editTeamName').value = team.name || '';
    document.getElementById('editTeamSlogan').value = team.slogan || '';
    document.getElementById('editTeamMMR').value = team.mmr || '';
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
    const playersContainer = document.getElementById('playersEditContainer');
    playersContainer.innerHTML = '';
    
    (team.players || []).forEach((player) => {
        addPlayerField(player.name, player.role);
    });
    
    document.getElementById('editTeamModal').classList.remove('hidden');
}

function addPlayerField(name = '', role = '') {
    const container = document.getElementById('playersEditContainer');
    const playerDiv = document.createElement('div');
    playerDiv.className = 'player-edit-row';
    playerDiv.innerHTML = `
        <input type="text" placeholder="–ò–º—è –∏–≥—Ä–æ–∫–∞" value="${name}" class="player-name-input">
        <input type="text" placeholder="–†–æ–ª—å" value="${role}" class="player-role-input">
        <button type="button" class="remove-player">üóëÔ∏è</button>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    playerDiv.querySelector('.remove-player').addEventListener('click', function() {
        playerDiv.remove();
    });
    
    container.appendChild(playerDiv);
}

function saveTeamChanges() {
    if (!currentEditingTeamId) return;
    
    const name = document.getElementById('editTeamName').value;
    const slogan = document.getElementById('editTeamSlogan').value;
    const mmr = document.getElementById('editTeamMMR').value;
    
    const players = [];
    document.querySelectorAll('.player-edit-row').forEach(row => {
        const nameInput = row.querySelector('.player-name-input');
        const roleInput = row.querySelector('.player-role-input');
        if (nameInput.value.trim()) {
            players.push({
                name: nameInput.value,
                role: roleInput.value || '–ò–≥—Ä–æ–∫'
            });
        }
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Firebase
    database.ref('teams/' + currentEditingTeamId).update({
        name: name,
        slogan: slogan,
        mmr: mmr,
        players: players
    });
    
    closeEditTeamModal();
    alert('‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
}

function closeEditTeamModal() {
    document.getElementById('editTeamModal').classList.add('hidden');
    currentEditingTeamId = null;
}

// === –ó–ê–ì–†–£–ó–ö–ê –ù–ê–ß–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• ===
function loadInitialData() {
    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    // –î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–ª—É—à–∞—Ç–µ–ª–∏
}

// === –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ù–ï–†–ï–ê–õ–ò–ó–û–í–ê–ù–ù–´–• –§–£–ù–ö–¶–ò–ô ===
function updateTeamsSettings() {
    alert('–§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

function saveBracketChanges() {
    alert('–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ç–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

function saveScheduleChanges() {
    alert('–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

function addScheduleMatch() {
    alert('–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

console.log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Illusive Cup –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!');
// === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ê–ù–ò–ú–ê–¶–ò–ò –î–õ–Ø –ù–ò–ö–ù–ï–ô–ú–û–í ===
function enhancePlayerNameAnimations() {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    document.querySelectorAll('.player-name-bublas').forEach((name, index) => {
        // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ "–≤–æ–ª–Ω—ã"
        name.style.setProperty('--hover-delay', `${index * 0.1}s`);
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∏–º—è
        name.addEventListener('click', function() {
            this.style.animation = 'none';
            setTimeout(() => {
                this.style.animation = '';
            }, 10);
        });
    });
}

// –í—ã–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
function initializePlayerAnimations() {
    setTimeout(enhancePlayerNameAnimations, 3500);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
function createTeamCard(teamId, team) {
    const card = document.createElement('div');
    card.className = 'team-visiting-card';
    card.setAttribute('data-team-id', teamId);
    
    const playersHTML = (team.players || []).map((player, index) => `
        <div class="player-card-bublas">
            <div class="player-role-bublas">${player.role || '–ò–≥—Ä–æ–∫'}</div>
            <div class="player-name-bublas">${player.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
        </div>
    `).join('');
    
    const editButton = isEditor ? 
        `<button class="edit-team-btn" data-team-id="${teamId}">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>` : '';
    
    card.innerHTML = `
        <div class="card-header">
            <div class="header-highlight"></div>
            <div class="team-name-bublas">${team.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</div>
            <div class="team-subtitle">${team.slogan || '–ì–æ—Ç–æ–≤—ã –∫ –ø–æ–±–µ–¥–µ!'}</div>
        </div>
        <div class="team-card-content">
            <div class="players-section-bublas">
                <div class="section-title-bublas">–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã</div>
                <div class="player-grid-bublas">
                    ${playersHTML}
                </div>
            </div>
            <div class="stats-section-bublas">
                <div class="mmr-display-bublas">
                    <div class="mmr-label-bublas">–°—Ä–µ–¥–Ω–∏–π MMR</div>
                    <div class="mmr-value-bublas">${team.mmr || '0'}</div>
                </div>
                <div class="tournament-section-bublas">
                    <div class="tournament-text-bublas">–∏–≥—Ä–∞–µ–º –Ω–∞</div>
                    <div class="tournament-badge-bublas">Illusive Cup</div>
                </div>
            </div>
        </div>
        <div class="team-footer-bublas">
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ
            ${editButton}
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (isEditor) {
        const editBtn = card.querySelector('.edit-team-btn');
        editBtn.addEventListener('click', () => editTeam(teamId));
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∏–º–µ–Ω –∏–≥—Ä–æ–∫–æ–≤
    setTimeout(() => {
        enhancePlayerNameAnimations();
    }, 100);
    
    return card;
}
