// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase
const firebaseConfig = {
    apiKey: "AIzaSyC4mZxJpzqoQn1l7K4wQ5Y9v8XzAbCdEfG",
    authDomain: "illusive-cup-2025.firebaseapp.com",
    databaseURL: "https://illusive-cup-2025-default-rtdb.firebaseio.com",
    projectId: "illusive-cup-2025",
    storageBucket: "illusive-cup-2025.firebasestorage.app",
    messagingSenderId: "123456789012",
    appId: "1:123456789012:web:abcdef123456789"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
firebase.initializeApp(firebaseConfig);
const database = firebase.database();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let teams = {};
let matches = {};
let audienceAwards = {};
let selectedMatchForVoting = null;
let selectedPlayersForVoting = [];

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const elements = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    teamsContent: document.getElementById('teamsContent'),
    scheduleContent: document.getElementById('scheduleContent'),
    groupStageContent: document.getElementById('groupStageContent'),
    playoffContent: document.getElementById('playoffContent'),
    audienceAwardContent: document.getElementById('audienceAwardContent'),
    
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    teamsDropdownBtn: document.getElementById('teamsDropdownBtn'),
    teamsDropdown: document.getElementById('teamsDropdown'),
    scheduleBtn: document.getElementById('scheduleBtn'),
    groupStageBtn: document.getElementById('groupStageBtn'),
    playoffBtn: document.getElementById('playoffBtn'),
    audienceAwardBtn: document.getElementById('audienceAwardBtn'),
    adminBtn: document.getElementById('adminBtn'),
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    adminPanel: document.getElementById('adminPanel'),
    authModal: document.getElementById('authModal'),
    editTeamModal: document.getElementById('editTeamModal'),
    addMatchModal: document.getElementById('addMatchModal'),
    editMatchResultModal: document.getElementById('editMatchResultModal'),
    votingModal: document.getElementById('votingModal'),
    editVoteModal: document.getElementById('editVoteModal'),
    
    // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connectionStatus: document.getElementById('connectionStatus'),
    
    // –î—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    singleTeamCard: document.getElementById('singleTeamCard'),
    upcomingMatches: document.getElementById('upcomingMatches'),
    completedMatches: document.getElementById('completedMatches'),
    groupStageContainer: document.getElementById('groupStageContainer'),
    audienceAwardsContent: document.getElementById('audienceAwardsContent')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
    loadInitialData();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function initializeApp() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Illusive Cup 2025...');
    createAnimatedBackground();
    checkAuthentication();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–∞
function createAnimatedBackground() {
    const bg = document.getElementById('animatedBg');
    const particleCount = 15;
    
    for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        
        // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—è
        const size = Math.random() * 100 + 50;
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        particle.style.left = `${Math.random() * 100}%`;
        particle.style.background = `rgba(76, 175, 80, ${Math.random() * 0.2 + 0.1})`;
        
        // –°–ª—É—á–∞–π–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        const duration = Math.random() * 30 + 20;
        const delay = Math.random() * 10;
        particle.style.animation = `float ${duration}s linear ${delay}s infinite`;
        
        bg.appendChild(particle);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    elements.teamsDropdownBtn.addEventListener('click', toggleTeamsDropdown);
    elements.scheduleBtn.addEventListener('click', () => showContent('schedule'));
    elements.groupStageBtn.addEventListener('click', () => showContent('groupStage'));
    elements.playoffBtn.addEventListener('click', () => showContent('playoff'));
    elements.audienceAwardBtn.addEventListener('click', () => showContent('audienceAward'));
    elements.adminBtn.addEventListener('click', showAdminPanel);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    setupModalCloseListeners();
    
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    document.getElementById('confirmAuth').addEventListener('click', authenticateEditor);
    document.getElementById('cancelAuth').addEventListener('click', closeAuthModal);
    document.getElementById('editorPassword').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') authenticateEditor();
    });
    
    // –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    document.getElementById('submitVote').addEventListener('click', submitVote);
    document.getElementById('cancelVote').addEventListener('click', closeVotingModal);
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤
    document.getElementById('saveVoteChanges').addEventListener('click', saveVoteChanges);
    document.getElementById('deleteVoteBtn').addEventListener('click', deleteVote);
    document.getElementById('cancelEditVote').addEventListener('click', closeEditVoteModal);
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º –≤ –∞–¥–º–∏–Ω–∫–µ
    document.getElementById('selectMatchForVote').addEventListener('click', selectMatchForVoting);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function setupModalCloseListeners() {
    const closeButtons = [
        { btn: 'closeAdminPanel', modal: 'adminPanel' },
        { btn: 'closeAuthModal', modal: 'authModal' },
        { btn: 'closeEditTeamModal', modal: 'editTeamModal' },
        { btn: 'closeAddMatchModal', modal: 'addMatchModal' },
        { btn: 'closeEditMatchResultModal', modal: 'editMatchResultModal' },
        { btn: 'closeVotingModal', modal: 'votingModal' },
        { btn: 'closeEditVoteModal', modal: 'editVoteModal' }
    ];
    
    closeButtons.forEach(({ btn, modal }) => {
        const element = document.getElementById(btn);
        if (element) {
            element.addEventListener('click', () => {
                document.getElementById(modal).classList.add('hidden');
            });
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            e.target.classList.add('hidden');
        }
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function checkAuthentication() {
    const savedAuth = localStorage.getItem('editorAuth');
    if (savedAuth && JSON.parse(savedAuth).expires > Date.now()) {
        currentUser = JSON.parse(savedAuth);
        updateUIForAuthenticatedUser();
    }
}

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
function authenticateEditor() {
    const password = document.getElementById('editorPassword').value;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
    if (password === 'admin123') { // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        const authData = {
            authenticated: true,
            expires: Date.now() + (24 * 60 * 60 * 1000) // 24 —á–∞—Å–∞
        };
        
        localStorage.setItem('editorAuth', JSON.stringify(authData));
        currentUser = authData;
        
        closeAuthModal();
        showAdminPanel();
        updateUIForAuthenticatedUser();
        
        showNotification('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!', 'success');
    } else {
        showNotification('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!', 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUIForAuthenticatedUser() {
    elements.adminBtn.style.display = 'block';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function showAdminPanel() {
    if (!currentUser) {
        showAuthModal();
        return;
    }
    
    loadAdminData();
    elements.adminPanel.classList.remove('hidden');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–æ–∫ –∞–¥–º–∏–Ω–∫–∏
    setupAdminTabs();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–æ–∫ –∞–¥–º–∏–Ω–∫–∏
function setupAdminTabs() {
    const tabBtns = document.querySelectorAll('.tab-btn');
    const tabPanes = document.querySelectorAll('.tab-pane');
    
    tabBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            const tabId = this.getAttribute('data-tab');
            
            // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            tabBtns.forEach(b => b.classList.remove('active'));
            tabPanes.forEach(p => p.classList.remove('active'));
            
            // –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            this.classList.add('active');
            document.getElementById(tabId).classList.add('active');
            
            // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
            if (tabId === 'audienceAwardTab') {
                loadAudienceAwardsForEditing();
            }
        });
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
function loadAdminData() {
    loadTeamsForAdmin();
    loadScheduleForAdmin();
    loadAudienceAwardsForEditing();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function showAuthModal() {
    document.getElementById('editorPassword').value = '';
    elements.authModal.classList.remove('hidden');
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
function closeAuthModal() {
    elements.authModal.classList.add('hidden');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
function toggleTeamsDropdown() {
    elements.teamsDropdown.classList.toggle('active');
    elements.teamsDropdownBtn.parentElement.classList.toggle('active');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
function showContent(type) {
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    const sections = [
        elements.teamsContent,
        elements.scheduleContent,
        elements.groupStageContent,
        elements.playoffContent,
        elements.audienceAwardContent
    ];
    
    sections.forEach(section => section.classList.add('hidden'));
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
    switch (type) {
        case 'teams':
            elements.teamsContent.classList.remove('hidden');
            break;
        case 'schedule':
            elements.scheduleContent.classList.remove('hidden');
            loadSchedule();
            break;
        case 'groupStage':
            elements.groupStageContent.classList.remove('hidden');
            loadGroupStage();
            break;
        case 'playoff':
            elements.playoffContent.classList.remove('hidden');
            loadPlayoff();
            break;
        case 'audienceAward':
            elements.audienceAwardContent.classList.remove('hidden');
            loadAudienceAwards();
            break;
    }
    
    // –ó–∞–∫—Ä—ã—Ç—å –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    elements.teamsDropdown.classList.remove('active');
    elements.teamsDropdownBtn.parentElement.classList.remove('active');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function loadInitialData() {
    updateConnectionStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...', 'connecting');
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥
    database.ref('teams').on('value', (snapshot) => {
        teams = snapshot.val() || {};
        updateTeamsDropdown();
        updateConnectionStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ', 'connected');
    }, (error) => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥:', error);
        updateConnectionStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'error');
    });
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—á–µ–π
    database.ref('matches').on('value', (snapshot) => {
        matches = snapshot.val() || {};
        loadSchedule();
    });
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–∑–∞ –∑—Ä–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–º–ø–∞—Ç–∏–π
    database.ref('audienceAwards').on('value', (snapshot) => {
        audienceAwards = snapshot.val() || {};
        loadAudienceAwards();
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function updateConnectionStatus(message, status) {
    elements.connectionStatus.classList.remove('hidden');
    elements.connectionStatus.querySelector('.status-text').textContent = message;
    elements.connectionStatus.className = `connection-status ${status}`;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
function updateTeamsDropdown() {
    elements.teamsDropdown.innerHTML = '';
    
    Object.keys(teams).forEach(teamId => {
        const team = teams[teamId];
        const link = document.createElement('a');
        link.textContent = team.name;
        link.href = '#';
        link.addEventListener('click', (e) => {
            e.preventDefault();
            showTeamCard(teamId);
        });
        elements.teamsDropdown.appendChild(link);
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–º–∞–Ω–¥—ã
function showTeamCard(teamId) {
    const team = teams[teamId];
    if (!team) return;
    
    const cardHTML = `
        <div class="team-visiting-card">
            <div class="card-header">
                <div class="header-highlight"></div>
                <h2 class="team-name-bublas">${team.name}</h2>
                <p class="team-subtitle">${team.slogan || '–ö–æ–º–∞–Ω–¥–∞ –º–µ—á—Ç—ã'}</p>
            </div>
            <div class="team-card-content">
                <div class="players-section-bublas">
                    <h3 class="section-title-bublas">–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã</h3>
                    <div class="player-grid-bublas">
                        ${team.players ? team.players.map((player, index) => `
                            <div class="player-card-bublas">
                                <div class="player-name-bublas">${player.name}</div>
                                <div class="player-role-bublas">${player.role || '–ò–≥—Ä–æ–∫'}</div>
                            </div>
                        `).join('') : '<p>–°–æ—Å—Ç–∞–≤ –Ω–µ —É–∫–∞–∑–∞–Ω</p>'}
                    </div>
                </div>
                <div class="team-stats-bublas">
                    <div class="stat-item-bublas">
                        <div class="stat-value-bublas">${team.wins || 0}</div>
                        <div class="stat-label-bublas">–ü–æ–±–µ–¥</div>
                    </div>
                    <div class="stat-item-bublas">
                        <div class="stat-value-bublas">${team.losses || 0}</div>
                        <div class="stat-label-bublas">–ü–æ—Ä–∞–∂–µ–Ω–∏–π</div>
                    </div>
                    <div class="stat-item-bublas">
                        <div class="stat-value-bublas">${team.rating || 1000}</div>
                        <div class="stat-label-bublas">–†–µ–π—Ç–∏–Ω–≥</div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    elements.singleTeamCard.innerHTML = cardHTML;
    showContent('teams');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function loadSchedule() {
    if (!elements.upcomingMatches || !elements.completedMatches) return;
    
    elements.upcomingMatches.innerHTML = '';
    elements.completedMatches.innerHTML = '';
    
    Object.keys(matches).forEach(matchId => {
        const match = matches[matchId];
        const matchCard = createMatchCard(matchId, match);
        
        if (match.status === 'completed') {
            elements.completedMatches.appendChild(matchCard);
        } else {
            elements.upcomingMatches.appendChild(matchCard);
        }
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞—Ç—á–∞
function createMatchCard(matchId, match) {
    const team1 = teams[match.team1];
    const team2 = teams[match.team2];
    
    if (!team1 || !team2) return document.createElement('div');
    
    const card = document.createElement('div');
    card.className = 'match-card';
    card.innerHTML = `
        <div class="match-header">
            <span class="match-stage">${getStageName(match.stage)}</span>
            <span class="match-time">${formatDateTime(match.time)}</span>
        </div>
        <div class="match-teams">
            <div class="team">
                <div class="team-name">${team1.name}</div>
                <div class="team-score">${match.score1 || 0}</div>
            </div>
            <div class="vs">VS</div>
            <div class="team">
                <div class="team-name">${team2.name}</div>
                <div class="team-score">${match.score2 || 0}</div>
            </div>
        </div>
        <div class="match-status ${match.status === 'completed' ? 'status-completed' : 'status-upcoming'}">
            ${match.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω'}
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    if (match.status === 'completed' && currentUser) {
        card.style.cursor = 'pointer';
        card.addEventListener('click', () => openVotingModal(matchId, match));
    }
    
    return card;
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function openVotingModal(matchId, match) {
    selectedMatchForVoting = { id: matchId, ...match };
    selectedPlayersForVoting = [];
    
    const team1 = teams[match.team1];
    const team2 = teams[match.team2];
    
    if (!team1 || !team2) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
    document.getElementById('votingMatchInfo').innerHTML = `
        <h3>${team1.name} vs ${team2.name}</h3>
        <p>${formatDateTime(match.time)} ‚Ä¢ ${getStageName(match.stage)}</p>
    `;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    loadPlayersForVoting('team1Voting', team1);
    loadPlayersForVoting('team2Voting', team2);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    elements.votingModal.classList.remove('hidden');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function loadPlayersForVoting(containerId, team) {
    const container = document.getElementById(containerId);
    container.innerHTML = `
        <div class="voting-team-header">
            <div class="voting-team-name">${team.name}</div>
        </div>
        <div class="player-voting-list">
            ${team.players ? team.players.map((player, index) => `
                <div class="player-voting-item" data-player-id="${index}">
                    <div class="player-checkbox"></div>
                    <div class="player-voting-info">
                        <div class="player-voting-name">${player.name}</div>
                        <div class="player-voting-role">${player.role || '–ò–≥—Ä–æ–∫'}</div>
                    </div>
                </div>
            `).join('') : '<p>–ò–≥—Ä–æ–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã</p>'}
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤
    container.querySelectorAll('.player-voting-item').forEach(item => {
        item.addEventListener('click', function() {
            const playerId = this.getAttribute('data-player-id');
            const player = team.players[playerId];
            const playerKey = `${team.name}_${player.name}`;
            
            if (this.classList.contains('selected')) {
                // –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                this.classList.remove('selected');
                selectedPlayersForVoting = selectedPlayersForVoting.filter(p => p.key !== playerKey);
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                this.classList.add('selected');
                selectedPlayersForVoting.push({
                    key: playerKey,
                    team: team.name,
                    player: player.name,
                    reason: ''
                });
            }
        });
    });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–∞
function submitVote() {
    if (selectedPlayersForVoting.length === 0) {
        showNotification('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞!', 'error');
        return;
    }
    
    const voteId = Date.now().toString();
    const voteData = {
        matchId: selectedMatchForVoting.id,
        matchInfo: `${teams[selectedMatchForVoting.team1].name} vs ${teams[selectedMatchForVoting.team2].name}`,
        players: selectedPlayersForVoting,
        timestamp: Date.now()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
    database.ref(`audienceAwards/${voteId}`).set(voteData)
        .then(() => {
            showNotification('‚úÖ –ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', 'success');
            closeVotingModal();
        })
        .catch((error) => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞:', error);
            showNotification('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–∞!', 'error');
        });
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function closeVotingModal() {
    elements.votingModal.classList.add('hidden');
    selectedMatchForVoting = null;
    selectedPlayersForVoting = [];
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞
function loadGroupStage() {
    // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞
    elements.groupStageContainer.innerHTML = `
        <div class="group-stage-container">
            <div class="group-tables">
                <div class="group-table">
                    <div class="group-header">
                        <h3>–ì—Ä—É–ø–ø–∞ A</h3>
                    </div>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>–ö–æ–º–∞–Ω–¥–∞</th>
                                <th>–ò</th>
                                <th>–í</th>
                                <th>–ü</th>
                                <th>–û</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="qualified">
                                <td>1</td>
                                <td class="team-cell">
                                    <div class="team-logo-small">T1</div>
                                    <span>Team Alpha</span>
                                </td>
                                <td>3</td>
                                <td>3</td>
                                <td>0</td>
                                <td>9</td>
                            </tr>
                            <tr class="qualified">
                                <td>2</td>
                                <td class="team-cell">
                                    <div class="team-logo-small">T2</div>
                                    <span>Team Beta</span>
                                </td>
                                <td>3</td>
                                <td>2</td>
                                <td>1</td>
                                <td>6</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    `;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–µ–π-–æ—Ñ—Ñ
function loadPlayoff() {
    // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–ª–µ–π-–æ—Ñ—Ñ
    document.getElementById('thirdPlaceMatch').innerHTML = `
        <div class="match-teams">
            <div class="team">
                <div class="team-name">Team Gamma</div>
                <div class="team-score">2</div>
            </div>
            <div class="vs">VS</div>
            <div class="team">
                <div class="team-name">Team Delta</div>
                <div class="team-score">1</div>
            </div>
        </div>
    `;
    
    document.getElementById('grandFinalMatch').innerHTML = `
        <div class="match-teams">
            <div class="team">
                <div class="team-name">Team Alpha</div>
                <div class="team-score">3</div>
            </div>
            <div class="vs">VS</div>
            <div class="team">
                <div class="team-name">Team Beta</div>
                <div class="team-score">2</div>
            </div>
        </div>
    `;
    
    document.getElementById('winnerSection').innerHTML = `
        <div class="winner-trophy">üèÜ</div>
        <div class="winner-name">Team Alpha</div>
        <p>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å Illusive Cup 2025</p>
    `;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–∑–∞ –∑—Ä–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–º–ø–∞—Ç–∏–π
function loadAudienceAwards() {
    if (!elements.audienceAwardsContent) return;
    
    let awardsHTML = '';
    
    if (Object.keys(audienceAwards).length === 0) {
        awardsHTML = `
            <div class="text-center">
                <h3>üé≠ –ü—Ä–∏–∑ –∑—Ä–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–º–ø–∞—Ç–∏–π</h3>
                <p>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å</p>
            </div>
        `;
    } else {
        awardsHTML = `
            <div class="awards-grid">
                ${Object.keys(audienceAwards).map(voteId => {
                    const vote = audienceAwards[voteId];
                    return `
                        <div class="award-card">
                            <div class="award-header">
                                <div class="award-icon">üé≠</div>
                                <div class="award-title">${vote.matchInfo}</div>
                            </div>
                            ${vote.players.map(player => `
                                <div class="award-player">${player.player}</div>
                                <div class="award-reason">${player.reason || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}</div>
                            `).join('')}
                        </div>
                    `;
                }).join('')}
            </div>
        `;
    }
    
    elements.audienceAwardsContent.innerHTML = awardsHTML;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–∑–∞ –∑—Ä–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–º–ø–∞—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function loadAudienceAwardsForEditing() {
    const votesList = document.getElementById('votesList');
    if (!votesList) return;
    
    let votesHTML = '';
    
    if (Object.keys(audienceAwards).length === 0) {
        votesHTML = '<p>–ì–æ–ª–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>';
    } else {
        votesHTML = Object.keys(audienceAwards).map(voteId => {
            const vote = audienceAwards[voteId];
            return `
                <div class="vote-item-admin">
                    <div class="vote-info">
                        <div class="vote-match-admin">${vote.matchInfo}</div>
                        <div class="vote-players-admin">
                            ${vote.players.map(p => p.player).join(', ')}
                        </div>
                    </div>
                    <div class="admin-actions">
                        <button class="edit-btn" onclick="editVote('${voteId}')">
                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                        <button class="delete-btn" onclick="deleteVote('${voteId}')">
                            üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                    </div>
                </div>
            `;
        }).join('');
    }
    
    votesList.innerHTML = votesHTML;
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
function editVote(voteId) {
    const vote = audienceAwards[voteId];
    if (!vote) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –≥–æ–ª–æ—Å–∞
    window.editingVoteId = voteId;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–µ
    document.getElementById('editVoteInfo').innerHTML = `
        <h3>${vote.matchInfo}</h3>
        <p>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞</p>
    `;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–æ–ª—è–º–∏ –¥–ª—è –ø—Ä–∏—á–∏–Ω
    const playersList = document.getElementById('selectedPlayersList');
    playersList.innerHTML = vote.players.map((player, index) => `
        <div class="selected-player-item">
            <div class="selected-player-header">
                <div class="selected-player-name">${player.player}</div>
                <div class="selected-player-team">${player.team}</div>
            </div>
            <textarea class="reason-input" placeholder="–ü—Ä–∏—á–∏–Ω–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞..." 
                     data-player-index="${index}">${player.reason || ''}</textarea>
        </div>
    `).join('');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    elements.editVoteModal.classList.remove('hidden');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥–æ–ª–æ—Å–∞
function saveVoteChanges() {
    const voteId = window.editingVoteId;
    if (!voteId) return;
    
    const vote = audienceAwards[voteId];
    if (!vote) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    const reasonInputs = document.querySelectorAll('.reason-input');
    reasonInputs.forEach(input => {
        const playerIndex = input.getAttribute('data-player-index');
        if (vote.players[playerIndex]) {
            vote.players[playerIndex].reason = input.value;
        }
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
    database.ref(`audienceAwards/${voteId}`).update({
        players: vote.players
    })
    .then(() => {
        showNotification('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
        closeEditVoteModal();
        loadAudienceAwardsForEditing();
    })
    .catch((error) => {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error);
        showNotification('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!', 'error');
    });
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞
function deleteVote(voteId = null) {
    const idToDelete = voteId || window.editingVoteId;
    if (!idToDelete) return;
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≥–æ–ª–æ—Å?')) {
        database.ref(`audienceAwards/${idToDelete}`).remove()
            .then(() => {
                showNotification('‚úÖ –ì–æ–ª–æ—Å —É–¥–∞–ª–µ–Ω!', 'success');
                if (!voteId) {
                    closeEditVoteModal();
                }
                loadAudienceAwardsForEditing();
            })
            .catch((error) => {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞:', error);
                showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!', 'error');
            });
    }
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
function closeEditVoteModal() {
    elements.editVoteModal.classList.add('hidden');
    window.editingVoteId = null;
}

// –í—ã–±–æ—Ä –º–∞—Ç—á–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function selectMatchForVoting() {
    const matchSelect = document.getElementById('voteMatchSelect');
    const selectedMatchId = matchSelect.value;
    
    if (!selectedMatchId) {
        showNotification('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á!', 'error');
        return;
    }
    
    const match = matches[selectedMatchId];
    if (!match) return;
    
    openVotingModal(selectedMatchId, match);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
function loadTeamsForAdmin() {
    const teamsList = document.getElementById('adminTeamsList');
    if (!teamsList) return;
    
    let teamsHTML = '';
    
    Object.keys(teams).forEach(teamId => {
        const team = teams[teamId];
        teamsHTML += `
            <div class="admin-team-item">
                <div class="team-info">
                    <div class="team-name-admin">${team.name}</div>
                    <div class="team-slogan-admin">${team.slogan || '–ë–µ–∑ —Å–ª–æ–≥–∞–Ω–∞'}</div>
                </div>
                <div class="admin-actions">
                    <button class="edit-btn" onclick="editTeam('${teamId}')">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="delete-btn" onclick="deleteTeam('${teamId}')">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    });
    
    teamsList.innerHTML = teamsHTML;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
function loadScheduleForAdmin() {
    const scheduleList = document.getElementById('scheduleEditList');
    if (!scheduleList) return;
    
    let scheduleHTML = '';
    
    Object.keys(matches).forEach(matchId => {
        const match = matches[matchId];
        const team1 = teams[match.team1] || { name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' };
        const team2 = teams[match.team2] || { name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' };
        
        scheduleHTML += `
            <div class="admin-schedule-item">
                <div class="match-info-admin">
                    <div class="match-teams-admin">${team1.name} vs ${team2.name}</div>
                    <div class="match-details-admin">
                        ${formatDateTime(match.time)} ‚Ä¢ ${getStageName(match.stage)} ‚Ä¢ ${match.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω'}
                    </div>
                </div>
                <div class="admin-actions">
                    <button class="edit-btn" onclick="editMatchResult('${matchId}')">
                        ‚úèÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç
                    </button>
                    <button class="delete-btn" onclick="deleteMatch('${matchId}')">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    });
    
    scheduleList.innerHTML = scheduleHTML;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getStageName(stage) {
    const stages = {
        'group': '–ì—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø',
        'third_place': '–ú–∞—Ç—á –∑–∞ 3 –º–µ—Å—Ç–æ',
        'grand_final': '–ì—Ä–∞–Ω–¥ —Ñ–∏–Ω–∞–ª'
    };
    return stages[stage] || stage;
}

function formatDateTime(timestamp) {
    if (!timestamp) return '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    const date = new Date(timestamp);
    return date.toLocaleString('ru-RU');
}

function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? 'var(--accent-success)' : type === 'error' ? 'var(--accent-danger)' : 'var(--accent-warning)'};
        color: white;
        padding: 15px 20px;
        border-radius: var(--radius-medium);
        box-shadow: var(--shadow-medium);
        z-index: 10000;
        animation: slideInRight 0.3s ease-out;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.3s ease-in';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(100%);
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ
function editTeam(teamId) {
    console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:', teamId);
    showNotification('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
}

function deleteTeam(teamId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É?')) {
        database.ref(`teams/${teamId}`).remove()
            .then(() => showNotification('‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞!', 'success'))
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
                showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã!', 'error');
            });
    }
}

function editMatchResult(matchId) {
    console.log('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞:', matchId);
    showNotification('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
}

function deleteMatch(matchId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ç—á?')) {
        database.ref(`matches/${matchId}`).remove()
            .then(() => showNotification('‚úÖ –ú–∞—Ç—á —É–¥–∞–ª–µ–Ω!', 'success'))
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç—á–∞:', error);
                showNotification('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç—á–∞!', 'error');
            });
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—á–µ–π –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ –∞–¥–º–∏–Ω–∫–µ
function loadMatchesForVotingSelect() {
    const select = document.getElementById('voteMatchSelect');
    if (!select) return;
    
    select.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á --</option>';
    
    Object.keys(matches).forEach(matchId => {
        const match = matches[matchId];
        const team1 = teams[match.team1];
        const team2 = teams[match.team2];
        
        if (team1 && team2 && match.status === 'completed') {
            const option = document.createElement('option');
            option.value = matchId;
            option.textContent = `${team1.name} vs ${team2.name} (${formatDateTime(match.time)})`;
            select.appendChild(option);
        }
    });
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∞—Ç—á–µ–π –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
database.ref('matches').on('value', () => {
    loadMatchesForVotingSelect();
});