// js/services/security-service.js
import AppConfig from '../config/app-config.js';
import ErrorHandler from '../utils/error-handler.js';
import { firebaseService } from './firebase-service.js';

export class SecurityService {
    constructor() {
        this.isAuthenticated = false;
        this.sessionTimer = null;
        this.inactivityTimer = null;
        this.loginAttempts = 0;
        this.maxLoginAttempts = AppConfig.SECURITY.MAX_LOGIN_ATTEMPTS;
        this.sessionData = null;
    }

    async initialize() {
        await this.checkExistingSession();
        this.setupActivityMonitoring();
        console.log('‚úÖ Security Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async authenticate(password, options = {}) {
        const { isTemporary = false, token = null } = options;

        // –ó–∞—â–∏—Ç–∞ –æ—Ç brute force
        if (this.loginAttempts >= this.maxLoginAttempts) {
            const cooldown = this.getCooldownTime();
            throw new Error(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${cooldown} –º–∏–Ω—É—Ç`);
        }

        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await this.securityDelay();

        try {
            let isValid = false;

            if (isTemporary && token) {
                isValid = await this.validateTemporaryToken(token);
            } else {
                isValid = await this.validatePassword(password);
            }

            if (isValid) {
                await this.startSession({ isTemporary, token });
                this.loginAttempts = 0;
                return true;
            } else {
                this.loginAttempts++;
                const attemptsLeft = this.maxLoginAttempts - this.loginAttempts;
                
                if (attemptsLeft > 0) {
                    throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${attemptsLeft}`);
                } else {
                    throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞');
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    async validatePassword(password) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
        // –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        try {
            // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            const storedHash = await this.getStoredPasswordHash();
            return this.hashPassword(password) === storedHash;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è:', error);
            return false;
        }
    }

    async validateTemporaryToken(token) {
        try {
            const tokenData = await firebaseService.get(`temporary_access/${token}`);
            
            if (!tokenData) {
                throw new Error('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            if (tokenData.used) {
                throw new Error('–¢–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω');
            }

            if (Date.now() > tokenData.expiresAt) {
                throw new Error('–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫');
            }

            // –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            await firebaseService.update(`temporary_access/${token}`, { used: true });

            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
            throw error;
        }
    }

    async startSession(sessionOptions = {}) {
        const sessionId = this.generateSessionId();
        const sessionData = {
            id: sessionId,
            authenticated: true,
            timestamp: Date.now(),
            expiresAt: Date.now() + AppConfig.SECURITY.SESSION_TIMEOUT,
            userAgent: navigator.userAgent,
            ipHash: this.generateIPHash(),
            isTemporary: sessionOptions.isTemporary || false,
            token: sessionOptions.token || null
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        this.sessionData = sessionData;
        this.isAuthenticated = true;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        this.saveSessionToStorage(sessionData);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        await this.saveSessionToFirebase(sessionData);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        this.setupSessionTimers();

        console.log('üîê –°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞:', sessionId);
        return sessionId;
    }

    async checkExistingSession() {
        try {
            const sessionData = this.getSessionFromStorage();
            
            if (!sessionData) {
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if (Date.now() > sessionData.expiresAt) {
                this.clearSession();
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º user agent
            if (sessionData.userAgent !== navigator.userAgent) {
                console.warn('‚ö†Ô∏è User agent –∏–∑–º–µ–Ω–∏–ª—Å—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
                this.clearSession();
                return false;
            }

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            this.sessionData = sessionData;
            this.isAuthenticated = true;
            this.setupSessionTimers();

            console.log('üîê –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
            this.clearSession();
            return false;
        }
    }

    setupSessionTimers() {
        this.clearTimers();

        // –¢–∞–π–º–µ—Ä –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        const timeUntilExpiry = this.sessionData.expiresAt - Date.now();
        this.sessionTimer = setTimeout(() => {
            this.handleSessionExpiry();
        }, timeUntilExpiry);

        // –¢–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.resetInactivityTimer();
    }

    setupActivityMonitoring() {
        const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart'];
        
        events.forEach(event => {
            document.addEventListener(event, this.resetInactivityTimer.bind(this), { passive: true });
        });

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible') {
                this.resetInactivityTimer();
            }
        });
    }

    resetInactivityTimer() {
        if (!this.isAuthenticated) return;

        clearTimeout(this.inactivityTimer);

        this.inactivityTimer = setTimeout(() => {
            this.handleInactivity();
        }, AppConfig.SECURITY.SESSION_TIMEOUT);
    }

    handleSessionExpiry() {
        console.log('‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏');
        this.logout('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏');
        
        ErrorHandler.showNotification({
            type: 'warning',
            title: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞',
            message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞'
        });
    }

    handleInactivity() {
        console.log('‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        this.logout('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
        
        ErrorHandler.showNotification({
            type: 'warning',
            title: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞',
            message: '–ò–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥'
        });
    }

    logout(reason = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª') {
        console.log(`üîê –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã: ${reason}`);
        
        this.isAuthenticated = false;
        this.sessionData = null;
        this.clearTimers();
        this.clearSessionStorage();
        
        // –û–ø–æ–≤–µ—â–∞–µ–º –æ –≤—ã—Ö–æ–¥–µ
        this.notifyLogout(reason);
    }

    async generateTemporaryAccess(durationHours = 24) {
        if (!this.isAuthenticated) {
            throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
        }

        const token = this.generateToken();
        const expiresAt = Date.now() + (durationHours * 60 * 60 * 1000);

        const accessData = {
            token,
            expiresAt,
            createdAt: Date.now(),
            createdBy: this.sessionData.id,
            used: false,
            durationHours
        };

        await firebaseService.set(`temporary_access/${token}`, accessData);

        const accessLink = `${window.location.origin}${window.location.pathname}?access_token=${token}`;
        
        return {
            token,
            link: accessLink,
            expiresAt: new Date(expiresAt).toLocaleString('ru-RU'),
            durationHours
        };
    }

    async changePassword(newPassword, currentPassword = null) {
        if (!this.isAuthenticated) {
            throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
        }

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä–æ–ª—è
        // –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è

        try {
            const passwordHash = this.hashPassword(newPassword);
            await this.storePasswordHash(passwordHash);

            // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π
            await this.invalidateOtherSessions();

            ErrorHandler.showNotification({
                type: 'success',
                title: '–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω',
                message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
            });

            return true;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å');
        }
    }

    // –£—Ç–∏–ª–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    generateSessionId() {
        return 'session_' + Date.now().toString(36) + Math.random().toString(36).substr(2, 9);
    }

    generateToken() {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        let token = '';
        
        for (let i = 0; i < AppConfig.SECURITY.TOKEN_LENGTH; i++) {
            token += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        
        return 'temp_' + token;
    }

    hashPassword(password) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        // –ù–∞–ø—Ä–∏–º–µ—Ä: bcrypt, Argon2, –∏–ª–∏ PBKDF2
        let hash = 0;
        for (let i = 0; i < password.length; i++) {
            const char = password.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return hash.toString(36);
    }

    generateIPHash() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Ö–µ—à–∞ IP (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ IP –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
        return btoa(navigator.userAgent + navigator.language).substr(0, 16);
    }

    getCooldownTime() {
        const baseCooldown = 1; // –º–∏–Ω—É—Ç–∞
        return baseCooldown * Math.pow(2, this.loginAttempts - this.maxLoginAttempts);
    }

    async securityDelay() {
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç timing attacks
        const baseDelay = 500 + Math.random() * 500;
        const penalty = this.loginAttempts * 200;
        await new Promise(resolve => setTimeout(resolve, baseDelay + penalty));
    }

    // –†–∞–±–æ—Ç–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
    saveSessionToStorage(sessionData) {
        try {
            localStorage.setItem('editor_session', JSON.stringify(sessionData));
            sessionStorage.setItem('editor_active', 'true');
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', error);
        }
    }

    getSessionFromStorage() {
        try {
            const sessionJson = localStorage.getItem('editor_session');
            return sessionJson ? JSON.parse(sessionJson) : null;
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error);
            return null;
        }
    }

    clearSessionStorage() {
        try {
            localStorage.removeItem('editor_session');
            sessionStorage.removeItem('editor_active');
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–∏:', error);
        }
    }

    async saveSessionToFirebase(sessionData) {
        try {
            await firebaseService.set(`sessions/${sessionData.id}`, {
                ...sessionData,
                // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Firebase
                userAgent: undefined,
                ipHash: undefined
            });
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –≤ Firebase:', error);
        }
    }

    async invalidateOtherSessions() {
        try {
            if (this.sessionData) {
                // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π –∫–∞–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ
                const sessions = await firebaseService.get('sessions');
                if (sessions) {
                    const updates = {};
                    Object.keys(sessions).forEach(sessionId => {
                        if (sessionId !== this.sessionData.id) {
                            updates[`sessions/${sessionId}/valid`] = false;
                        }
                    });
                    await firebaseService.batchSet(updates);
                }
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ—Å—Å–∏–∏:', error);
        }
    }

    async getStoredPasswordHash() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ö–µ—à –¥–æ–ª–∂–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
        // –ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        try {
            const stored = await firebaseService.get('admin/password_hash');
            return stored || this.hashPassword('IllusiveCup2025!'); // fallback
        } catch (error) {
            return this.hashPassword('IllusiveCup2025!');
        }
    }

    async storePasswordHash(hash) {
        try {
            await firebaseService.set('admin/password_hash', hash);
        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö–µ—à –ø–∞—Ä–æ–ª—è:', error);
            throw error;
        }
    }

    // –û–ø–æ–≤–µ—â–µ–Ω–∏—è
    notifyLogout(reason) {
        const event = new CustomEvent('security:logout', {
            detail: { reason }
        });
        document.dispatchEvent(event);
    }

    // –û—á–∏—Å—Ç–∫–∞
    clearTimers() {
        clearTimeout(this.sessionTimer);
        clearTimeout(this.inactivityTimer);
        this.sessionTimer = null;
        this.inactivityTimer = null;
    }

    destroy() {
        this.clearTimers();
        console.log('‚úÖ Security Service —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã
    getAuthStatus() {
        return {
            isAuthenticated: this.isAuthenticated,
            sessionData: this.sessionData ? { ...this.sessionData } : null,
            loginAttempts: this.loginAttempts,
            maxAttempts: this.maxLoginAttempts
        };
    }

    requireAuth() {
        if (!this.isAuthenticated) {
            throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
        }
        return true;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const securityService = new SecurityService();

export default SecurityService;