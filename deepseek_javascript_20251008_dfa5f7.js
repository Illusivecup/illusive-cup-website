// js/app.js
import AppConfig from './config/app-config.js';
import ErrorHandler from './utils/error-handler.js';
import PerformanceOptimizer from './utils/performance-optimizer.js';
import { AppState } from './utils/state-manager.js';
import { firebaseService } from './services/firebase-service.js';
import { securityService } from './services/security-service.js';
import { teamsManager } from './managers/teams-manager.js';
import { tournamentManager } from './managers/tournament-manager.js';
import UIManager from './ui/ui-manager.js';

export class TournamentApp {
    constructor() {
        this.isInitialized = false;
        this.modules = new Map();
        this.uiManager = null;
    }

    async initialize() {
        try {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Illusive Cup Tournament App...');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
            await this.initializeSystem();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            await this.initializeServices();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            await this.initializeManagers();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
            await this.initializeUI();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await this.loadInitialData();
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            await this.finalizeInitialization();

            this.isInitialized = true;
            console.log('‚úÖ Tournament App —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            await this.handleFatalError(error);
        }
    }

    async initializeSystem() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        ErrorHandler.init();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        PerformanceOptimizer.init();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        this.setupGlobalHandlers();

        console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    async initializeServices() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
        await firebaseService.initialize();
        this.modules.set('firebase', firebaseService);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await securityService.initialize();
        this.modules.set('security', securityService);

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        firebaseService.onConnectionChange((connected) => {
            this.handleConnectionChange(connected);
        });

        console.log('‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    async initializeManagers() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–∞–Ω–¥
        await teamsManager.initialize();
        this.modules.set('teams', teamsManager);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        await tournamentManager.initialize();
        this.modules.set('tournament', tournamentManager);

        console.log('‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    async initializeUI() {
        this.uiManager = new UIManager();
        await this.uiManager.initialize();
        this.modules.set('ui', this.uiManager);

        console.log('‚úÖ UI Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    async loadInitialData() {
        try {
            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            await PerformanceOptimizer.preloadCriticalData([
                { 
                    promise: teamsManager.getAllTeams(), 
                    priority: 'high' 
                },
                { 
                    promise: tournamentManager.exportTournamentData(), 
                    priority: 'high' 
                }
            ]);

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ
            this.loadBackgroundData();

            console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    async finalizeInitialization() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        await this.checkURLAccess();

        // –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        this.startBackgroundProcesses();

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        this.trackInitializationMetrics();

        // –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        this.notifyReady();

        console.log('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ');
    }

    setupGlobalHandlers() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
        window.addEventListener('error', this.handleGlobalError.bind(this));
        window.addEventListener('unhandledrejection', this.handleUnhandledRejection.bind(this));

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
        window.addEventListener('online', this.handleOnlineStatus.bind(this));
        window.addEventListener('offline', this.handleOfflineStatus.bind(this));

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', this.handleVisibilityChange.bind(this));

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', this.handleBeforeUnload.bind(this));

        console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    handleConnectionChange(connected) {
        AppState.set('connectionStatus', connected ? 'connected' : 'disconnected');
        
        if (connected) {
            ErrorHandler.showNotification({
                type: 'success',
                title: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...',
                duration: 3000
            });
        } else {
            ErrorHandler.showNotification({
                type: 'warning',
                title: '–ü–æ—Ç–µ—Ä—è–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
                message: '–†–∞–±–æ—Ç–∞ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ',
                duration: 5000
            });
        }
    }

    async handleGlobalError(event) {
        console.error('üí• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:', event.error);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        ErrorHandler.logError(event.error, 'app_global');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (!this.isCriticalError(event.error)) {
            ErrorHandler.showNotification({
                type: 'error',
                title: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
                message: '–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º',
                duration: 5000
            });
        }
    }

    handleUnhandledRejection(event) {
        console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Promise:', event.reason);
        ErrorHandler.logError(event.reason, 'app_promise');
    }

    handleOnlineStatus() {
        console.log('üåê –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        AppState.set('networkStatus', 'online');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Firebase
        setTimeout(() => {
            firebaseService.initialize().catch(console.error);
        }, 1000);
    }

    handleOfflineStatus() {
        console.log('üåê –ü–æ—Ç–µ—Ä—è–Ω–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        AppState.set('networkStatus', 'offline');
    }

    handleVisibilityChange() {
        const isVisible = document.visibilityState === 'visible';
        AppState.set('appVisible', isVisible);
        
        if (isVisible) {
            // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –≤–∏–¥–∏–º—ã–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            this.checkConnection();
        }
    }

    handleBeforeUnload(event) {
        if (securityService.isAuthenticated) {
            securityService.logout('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.saveCriticalData();

        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (this.hasUnsavedChanges()) {
            event.preventDefault();
            event.returnValue = '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–π—Ç–∏?';
            return event.returnValue;
        }
    }

    async checkURLAccess() {
        const urlParams = new URLSearchParams(window.location.search);
        const accessToken = urlParams.get('access_token');
        const editorMode = urlParams.get('editor');

        try {
            if (accessToken) {
                await securityService.authenticate(null, { 
                    isTemporary: true, 
                    token: accessToken 
                });
                
                // –û—á–∏—â–∞–µ–º URL –æ—Ç —Ç–æ–∫–µ–Ω–∞
                window.history.replaceState({}, '', window.location.pathname);
                
                ErrorHandler.showNotification({
                    type: 'success',
                    title: '–í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
                    message: '–î–æ—Å—Ç—É–ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞',
                    duration: 5000
                });
            } else if (editorMode === 'true') {
                this.uiManager.showAuthModal();
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ URL:', error);
        }
    }

    loadBackgroundData() {
        // –§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        PerformanceOptimizer.idleCallback(() => {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        }, 2000);
    }

    startBackgroundProcesses() {
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        setInterval(() => {
            this.backgroundSync();
        }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

        // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        setInterval(() => {
            this.cleanupMemory();
        }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setInterval(() => {
            this.autoSave();
        }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }

    async backgroundSync() {
        if (!firebaseService.isConnected) return;

        try {
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            await Promise.allSettled([
                teamsManager.saveToCache(),
                // –î—Ä—É–≥–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã...
            ]);

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            this.updatePerformanceMetrics();
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    cleanupMemory() {
        PerformanceOptimizer.cleanup();
        
        // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (PerformanceOptimizer.getMetrics().memory_usage > 0.8) {
            console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...');
            // –õ–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
        }
    }

    autoSave() {
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (this.hasUnsavedChanges()) {
            this.saveCriticalData();
        }
    }

    trackInitializationMetrics() {
        if ('performance' in window) {
            const perfData = performance.getEntriesByType('navigation')[0];
            if (perfData) {
                const metrics = {
                    loadTime: perfData.loadEventEnd - perfData.loadEventStart,
                    domReady: perfData.domContentLoadedEventEnd - perfData.domContentLoadedEventStart,
                    totalTime: perfData.loadEventEnd - perfData.navigationStart,
                    initTime: Date.now() - perfData.navigationStart
                };

                PerformanceOptimizer.trackMetric('app_initialization', metrics);
                console.log('üìä –ú–µ—Ç—Ä–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', metrics);
            }
        }
    }

    notifyReady() {
        const event = new CustomEvent('app:ready', {
            detail: { 
                timestamp: Date.now(),
                version: '2.0.0'
            }
        });
        document.dispatchEvent(event);
    }

    async checkConnection() {
        try {
            const isConnected = await firebaseService.testConnection();
            AppState.set('connectionStatus', isConnected ? 'connected' : 'disconnected');
            return isConnected;
        } catch (error) {
            AppState.set('connectionStatus', 'error');
            return false;
        }
    }

    saveCriticalData() {
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage
            const criticalData = {
                teams: teamsManager.getAllTeams(),
                tournament: tournamentManager.exportTournamentData(),
                timestamp: Date.now()
            };

            localStorage.setItem('app_critical_data', JSON.stringify(criticalData));
        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:', error);
        }
    }

    hasUnsavedChanges() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const unsavedChanges = AppState.get('unsavedChanges', false);
        return unsavedChanges === true;
    }

    isCriticalError(error) {
        const criticalErrors = [
            'FirebaseError',
            'NetworkError',
            'TypeError',
            'ReferenceError'
        ];

        return criticalErrors.some(criticalError => 
            error.name?.includes(criticalError) || 
            error.message?.includes(criticalError)
        );
    }

    async handleFatalError(error) {
        console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.saveErrorState(error);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏
        ErrorHandler.showFallbackUI(error);

        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
        setTimeout(() => {
            this.attemptRecovery();
        }, 5000);
    }

    saveErrorState(error) {
        const errorState = {
            error: {
                message: error.message,
                stack: error.stack,
                name: error.name
            },
            appState: AppState.serialize(),
            modules: Array.from(this.modules.keys()),
            timestamp: Date.now(),
            userAgent: navigator.userAgent,
            url: window.location.href
        };

        try {
            sessionStorage.setItem('app_error_state', JSON.stringify(errorState));
        } catch (e) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏:', e);
        }
    }

    async attemptRecovery() {
        try {
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...');

            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            AppState.clear();

            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
            for (const [name, module] of this.modules) {
                if (typeof module.destroy === 'function') {
                    module.destroy();
                }
            }
            this.modules.clear();

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
            await this.initialize();

        } catch (recoveryError) {
            console.error('üí• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', recoveryError);
            
            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
            ErrorHandler.showNotification({
                type: 'error',
                title: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
                message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
                actions: [
                    {
                        id: 'reload',
                        label: '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å',
                        handler: () => window.location.reload()
                    }
                ]
            });
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getModule(name) {
        return this.modules.get(name);
    }

    getStatus() {
        return {
            initialized: this.isInitialized,
            modules: Array.from(this.modules.keys()),
            connection: firebaseService.isConnected,
            authentication: securityService.getAuthStatus(),
            performance: PerformanceOptimizer.getMetrics()
        };
    }

    async destroy() {
        console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        this.saveCriticalData();

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥—É–ª–∏
        for (const [name, module] of this.modules) {
            if (typeof module.destroy === 'function') {
                await module.destroy();
            }
        }

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        AppState.clear();

        this.isInitialized = false;
        this.modules.clear();
        this.uiManager = null;

        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new TournamentApp();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.tournamentApp = app;

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', async () => {
    try {
        await app.initialize();
    } catch (error) {
        console.error('üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', error);
        ErrorHandler.showFallbackUI(error);
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
window.addEventListener('error', (event) => {
    console.error('üí• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
});

window.addEventListener('unhandledrejection', (event) => {
    console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Promise:', event.reason);
});

export default app;