// js/ui/components/modal-manager.js
export class ModalManager {
    constructor() {
        this.modals = new Map();
        this.activeModal = null;
        this.backdrop = null;
    }

    registerModal(modalId, config = {}) {
        const modal = document.getElementById(modalId);
        if (!modal) {
            console.warn(`‚ö†Ô∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${modalId}`);
            return;
        }

        const modalConfig = {
            element: modal,
            isOpen: false,
            closers: config.closers || [],
            onOpen: config.onOpen || null,
            onClose: config.onClose || null,
            closeOnBackdrop: config.closeOnBackdrop !== false,
            closeOnEscape: config.closeOnEscape !== false
        };

        this.modals.set(modalId, modalConfig);
        this.setupModalEvents(modalId, modalConfig);
    }

    setupModalEvents(modalId, config) {
        const { element, closers, closeOnBackdrop, closeOnEscape } = config;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        closers.forEach(closerId => {
            const closer = document.getElementById(closerId);
            if (closer) {
                closer.addEventListener('click', () => this.close(modalId));
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ backdrop
        if (closeOnBackdrop) {
            element.addEventListener('click', (e) => {
                if (e.target === element) {
                    this.close(modalId);
                }
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
        if (closeOnEscape) {
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && this.activeModal === modalId) {
                    this.close(modalId);
                }
            });
        }
    }

    open(modalId) {
        if (this.activeModal === modalId) return;

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        if (this.activeModal) {
            this.close(this.activeModal);
        }

        const modal = this.modals.get(modalId);
        if (!modal) {
            console.warn(`‚ö†Ô∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${modalId}`);
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º backdrop
        this.showBackdrop();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.element.classList.remove('hidden');
        modal.isOpen = true;
        this.activeModal = modalId;

        // –í—ã–∑—ã–≤–∞–µ–º callback
        if (modal.onOpen) {
            modal.onOpen();
        }

        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        this.focusFirstInteractive(modal.element);

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        document.body.style.overflow = 'hidden';

        console.log(`üìÇ –û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: ${modalId}`);
    }

    close(modalId) {
        const modal = this.modals.get(modalId);
        if (!modal || !modal.isOpen) return;

        // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.element.classList.add('hidden');
        modal.isOpen = false;
        this.activeModal = null;

        // –°–∫—Ä—ã–≤–∞–µ–º backdrop –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        this.hideBackdropIfNeeded();

        // –í—ã–∑—ã–≤–∞–µ–º callback
        if (modal.onClose) {
            modal.onClose();
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        document.body.style.overflow = '';

        console.log(`üìÇ –ó–∞–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: ${modalId}`);
    }

    showBackdrop() {
        if (!this.backdrop) {
            this.backdrop = document.createElement('div');
            this.backdrop.className = 'modal-backdrop';
            this.backdrop.setAttribute('aria-hidden', 'true');
            document.body.appendChild(this.backdrop);
        }
        this.backdrop.classList.add('active');
    }

    hideBackdropIfNeeded() {
        if (this.backdrop && !this.activeModal) {
            this.backdrop.classList.remove('active');
        }
    }

    focusFirstInteractive(container) {
        const focusable = container.querySelectorAll(
            'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        
        if (focusable.length > 0) {
            focusable[0].focus();
        }
    }

    getActiveModal() {
        return this.activeModal;
    }

    isOpen(modalId) {
        const modal = this.modals.get(modalId);
        return modal ? modal.isOpen : false;
    }

    destroy() {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.modals.forEach((modal, modalId) => {
            if (modal.isOpen) {
                this.close(modalId);
            }
        });

        // –£–¥–∞–ª—è–µ–º backdrop
        if (this.backdrop) {
            this.backdrop.remove();
            this.backdrop = null;
        }

        this.modals.clear();
        this.activeModal = null;
    }
}