// js/managers/tournament-manager.js
import { AppState } from '../utils/state-manager.js';
import { firebaseService } from '../services/firebase-service.js';
import { teamsManager } from './teams-manager.js';
import DataValidator from '../utils/data-validator.js';
import ErrorHandler from '../utils/error-handler.js';

export class TournamentManager {
    constructor() {
        this.tournamentData = {
            bracket: {},
            schedule: [],
            groupStage: {},
            audienceAwards: {},
            settings: {}
        };
        this.subscriptions = new Set();
        this.isInitialized = false;
    }

    async initialize() {
        if (this.isInitialized) return;

        try {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await this.loadInitialData();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
            await this.setupSubscriptions();
            
            this.isInitialized = true;
            console.log('‚úÖ Tournament Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Tournament Manager:', error);
            throw error;
        }
    }

    async setupSubscriptions() {
        const paths = ['bracket', 'schedule', 'tournament', 'audienceAwards'];
        
        paths.forEach(path => {
            const unsubscribe = firebaseService.subscribe(path, (data) => {
                this.handleDataUpdate(path, data);
            });
            this.subscriptions.add(unsubscribe);
        });
    }

    handleDataUpdate(path, data) {
        switch (path) {
            case 'bracket':
                this.tournamentData.bracket = data || {};
                AppState.set('bracket', this.tournamentData.bracket, 'bracket_updated');
                break;
                
            case 'schedule':
                this.tournamentData.schedule = data || [];
                AppState.set('schedule', this.tournamentData.schedule, 'schedule_updated');
                break;
                
            case 'tournament':
                this.tournamentData.groupStage = data?.groupStage || {};
                this.tournamentData.settings = data?.settings || {};
                AppState.set('tournament', data, 'tournament_updated');
                break;
                
            case 'audienceAwards':
                this.tournamentData.audienceAwards = data || {};
                AppState.set('audienceAwards', this.tournamentData.audienceAwards, 'awards_updated');
                break;
        }

        console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ${path}`);
    }

    async loadInitialData() {
        try {
            const [bracket, schedule, tournament, awards] = await Promise.allSettled([
                firebaseService.get('bracket'),
                firebaseService.get('schedule'),
                firebaseService.get('tournament'),
                firebaseService.get('audienceAwards')
            ]);

            this.tournamentData.bracket = bracket.value || {};
            this.tournamentData.schedule = schedule.value || [];
            this.tournamentData.groupStage = tournament.value?.groupStage || {};
            this.tournamentData.settings = tournament.value?.settings || {};
            this.tournamentData.audienceAwards = awards.value || {};

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            AppState.set('bracket', this.tournamentData.bracket);
            AppState.set('schedule', this.tournamentData.schedule);
            AppState.set('tournament', tournament.value);
            AppState.set('audienceAwards', this.tournamentData.audienceAwards);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–æ–π
    async updateBracket(bracketData) {
        try {
            const validation = this.validateBracket(bracketData);
            if (!validation.isValid) {
                throw new Error(validation.errors.join(', '));
            }

            await firebaseService.set('bracket', bracketData);
            
            ErrorHandler.showNotification({
                type: 'success',
                title: '–°–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
                message: '–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞'
            });

            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∫–∏:', error);
            throw error;
        }
    }

    validateBracket(bracketData) {
        const errors = [];
        
        if (!bracketData) {
            errors.push('–î–∞–Ω–Ω—ã–µ —Å–µ—Ç–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
            return { isValid: false, errors };
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—É–Ω–¥–æ–≤
        const rounds = ['quarterfinals', 'semifinals', 'final'];
        rounds.forEach(round => {
            if (bracketData[round] && !Array.isArray(bracketData[round])) {
                errors.push(`–†–∞—É–Ω–¥ ${round} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º`);
            }
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Ç—á–µ–π
        Object.values(bracketData).forEach(matches => {
            if (Array.isArray(matches)) {
                matches.forEach((match, index) => {
                    const matchValidation = DataValidator.validateBracketMatch(match);
                    if (!matchValidation.isValid) {
                        errors.push(`–ú–∞—Ç—á ${index + 1}: ${matchValidation.errors.join(', ')}`);
                    }
                });
            }
        });

        return {
            isValid: errors.length === 0,
            errors
        };
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    async updateSchedule(scheduleData) {
        try {
            const validation = this.validateSchedule(scheduleData);
            if (!validation.isValid) {
                throw new Error(validation.errors.join(', '));
            }

            await firebaseService.set('schedule', scheduleData);
            
            ErrorHandler.showNotification({
                type: 'success',
                title: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
                message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç—á–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ'
            });

            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
            throw error;
        }
    }

    validateSchedule(scheduleData) {
        const errors = [];
        
        if (!Array.isArray(scheduleData)) {
            errors.push('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
            return { isValid: false, errors };
        }

        scheduleData.forEach((item, index) => {
            const validation = DataValidator.validateSchedule(item);
            if (!validation.isValid) {
                errors.push(`–≠–ª–µ–º–µ–Ω—Ç ${index + 1}: ${validation.errors.join(', ')}`);
            }
        });

        return {
            isValid: errors.length === 0,
            errors
        };
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤—ã–º —ç—Ç–∞–ø–æ–º
    async updateGroupStage(groupStageData) {
        try {
            await firebaseService.update('tournament', { groupStage: groupStageData });
            
            ErrorHandler.showNotification({
                type: 'success',
                title: '–ì—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø –æ–±–Ω–æ–≤–ª–µ–Ω',
                message: '–î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
            });

            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞:', error);
            throw error;
        }
    }

    async updateTournamentSettings(settings) {
        try {
            const validation = DataValidator.validateTournamentSettings(settings);
            if (!validation.isValid) {
                throw new Error(validation.errors.join(', '));
            }

            await firebaseService.update('tournament', { settings });
            
            ErrorHandler.showNotification({
                type: 'success',
                title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
                message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
            });

            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            throw error;
        }
    }

    // –ü—Ä–∏–∑—ã –∑—Ä–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–º–ø–∞—Ç–∏–π
    async updateAudienceAwards(awardsData) {
        try {
            await firebaseService.set('audienceAwards', awardsData);
            
            ErrorHandler.showNotification({
                type: 'success',
                title: '–ü—Ä–∏–∑—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
                message: '–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–æ–≤ –∑—Ä–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Å–∏–º–ø–∞—Ç–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
            });

            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤:', error);
            throw error;
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏
    async generateBracket(teams, format = 'single_elimination') {
        const teamList = Array.isArray(teams) ? teams : teamsManager.getAllTeams();
        
        if (teamList.length < 2) {
            throw new Error('–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∫–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∫–æ–º–∞–Ω–¥—ã');
        }

        let bracket = {};

        switch (format) {
            case 'single_elimination':
                bracket = this.generateSingleEliminationBracket(teamList);
                break;
            case 'double_elimination':
                bracket = this.generateDoubleEliminationBracket(teamList);
                break;
            default:
                throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: ${format}`);
        }

        await this.updateBracket(bracket);
        return bracket;
    }

    generateSingleEliminationBracket(teams) {
        const bracket = {
            quarterfinals: [],
            semifinals: [],
            final: []
        };

        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const shuffled = [...teams].sort(() => Math.random() - 0.5);
        
        // –ß–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª—ã
        for (let i = 0; i < Math.min(4, Math.floor(shuffled.length / 2)); i++) {
            bracket.quarterfinals.push({
                team1: shuffled[i * 2]?.id || '',
                team2: shuffled[i * 2 + 1]?.id || '',
                score1: null,
                score2: null,
                completed: false
            });
        }

        // –ü–æ–ª—É—Ñ–∏–Ω–∞–ª—ã
        bracket.semifinals.push(
            { team1: '', team2: '', score1: null, score2: null, completed: false },
            { team1: '', team2: '', score1: null, score2: null, completed: false }
        );

        // –§–∏–Ω–∞–ª
        bracket.final.push({
            team1: '', team2: '', score1: null, score2: null, completed: false
        });

        return bracket;
    }

    generateDoubleEliminationBracket(teams) {
        // –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–æ–π–Ω–æ–π —ç–ª–∏–º–∏–Ω–∞—Ü–∏–∏
        return this.generateSingleEliminationBracket(teams);
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    getNextMatch() {
        const now = new Date();
        const schedule = this.tournamentData.schedule || [];
        
        return schedule
            .filter(match => match.time && new Date(match.time) > now)
            .sort((a, b) => new Date(a.time) - new Date(b.time))[0];
    }

    getLiveMatches() {
        const bracket = this.tournamentData.bracket || {};
        const liveMatches = [];
        
        Object.values(bracket).forEach(round => {
            if (Array.isArray(round)) {
                round.forEach(match => {
                    if (match.completed === false && (match.score1 !== null || match.score2 !== null)) {
                        liveMatches.push(match);
                    }
                });
            }
        });

        return liveMatches;
    }

    getTournamentProgress() {
        const bracket = this.tournamentData.bracket || {};
        let totalMatches = 0;
        let completedMatches = 0;

        Object.values(bracket).forEach(round => {
            if (Array.isArray(round)) {
                round.forEach(match => {
                    totalMatches++;
                    if (match.completed) {
                        completedMatches++;
                    }
                });
            }
        });

        return totalMatches > 0 ? (completedMatches / totalMatches) * 100 : 0;
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    exportTournamentData() {
        return {
            ...this.tournamentData,
            teams: teamsManager.getAllTeams(),
            exportedAt: new Date().toISOString(),
            version: '1.0'
        };
    }

    // –û—á–∏—Å—Ç–∫–∞
    destroy() {
        this.subscriptions.forEach(unsubscribe => unsubscribe());
        this.subscriptions.clear();
        this.isInitialized = false;
        
        console.log('‚úÖ Tournament Manager —É–Ω–∏—á—Ç–æ–∂–µ–Ω');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const tournamentManager = new TournamentManager();

export default TournamentManager;