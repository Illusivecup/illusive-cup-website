// js/ui/ui-manager.js (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)

export class UIManager {
    // ... –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç–æ–¥—ã ...

    // === –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ===

    showAdminPanel() {
        if (!securityService.isAuthenticated) {
            this.showAuthModal();
            return;
        }

        this.openModal('adminPanel');
    }

    onAdminPanelOpen() {
        this.loadAdminPanelData();
        this.setupAdminPanelEvents();
    }

    onAdminPanelClose() {
        // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        AppState.set('adminUnsavedChanges', false);
    }

    async loadAdminPanelData() {
        try {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            await this.loadAdminTeams();
            await this.loadAdminBracket();
            await this.loadAdminSchedule();
            await this.loadAdminGroupStage();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏:', error);
            ErrorHandler.showNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
            });
        }
    }

    async loadAdminTeams() {
        const teams = teamsManager.getAllTeams();
        this.updateAdminTeamsList(teams);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
        const totalTeamsInput = document.getElementById('totalTeams');
        if (totalTeamsInput) {
            totalTeamsInput.value = teams.length;
        }
    }

    updateAdminTeamsList(teams) {
        const container = document.getElementById('adminTeamsList');
        if (!container) return;

        container.innerHTML = teams.map(team => `
            <div class="team-admin-item" role="listitem">
                <span class="team-name">${this.escapeHTML(team.name)}</span>
                <div class="team-actions">
                    <button class="btn btn--secondary btn--sm edit-team-admin" 
                            data-team-id="${team.id}"
                            aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ${this.escapeHTML(team.name)}">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn--danger btn--sm delete-team-admin" 
                            data-team-id="${team.id}"
                            aria-label="–£–¥–∞–ª–∏—Ç—å ${this.escapeHTML(team.name)}">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        this.addAdminTeamsEventListeners();
    }

    addAdminTeamsEventListeners() {
        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        document.querySelectorAll('.edit-team-admin').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const teamId = e.target.closest('button').dataset.teamId;
                this.openEditTeamModal(teamId);
            });
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        document.querySelectorAll('.delete-team-admin').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const teamId = e.target.closest('button').dataset.teamId;
                this.deleteTeam(teamId);
            });
        });
    }

    setupAdminPanelEvents() {
        // –í–∫–ª–∞–¥–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        document.querySelectorAll('.admin-tabs .tab-btn').forEach(tab => {
            tab.addEventListener('click', (e) => {
                this.switchAdminTab(e.target.dataset.tab);
            });
        });

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏
        this.addEventListener('applyTeamsCountBtn', 'click', () => this.applyTeamsCount());
        this.addEventListener('updateTeamsBtn', 'click', () => this.updateTeamsSettings());

        // –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞
        this.addEventListener('saveBracketBtn', 'click', () => this.saveBracketChanges());

        // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        this.addEventListener('addScheduleMatchBtn', 'click', () => this.addScheduleMatch());
        this.addEventListener('saveScheduleBtn', 'click', () => this.saveScheduleChanges());

        // –ì—Ä—É–ø–ø–æ–≤–æ–π —ç—Ç–∞–ø
        this.addEventListener('saveGroupStageBtn', 'click', () => this.saveGroupStageSettings());

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º
        this.addEventListener('generateAccessLink', 'click', () => this.generateAccessLink());
        this.addEventListener('copyLinkBtn', 'click', () => this.copyAccessLink());
        this.addEventListener('changePasswordBtn', 'click', () => this.changePassword());
    }

    switchAdminTab(tabName) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-pane').forEach(pane => {
            pane.hidden = true;
        });
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
            btn.setAttribute('aria-selected', 'false');
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        const tabPane = document.getElementById(tabName);
        const tabBtn = document.querySelector(`[data-tab="${tabName}"]`);
        
        if (tabPane && tabBtn) {
            tabPane.hidden = false;
            tabBtn.classList.add('active');
            tabBtn.setAttribute('aria-selected', 'true');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            this.loadAdminTabData(tabName);
        }
    }

    // === –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î ===

    openEditTeamModal(teamId) {
        const team = teamsManager.getTeam(teamId);
        if (!team) {
            ErrorHandler.showNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞',
                message: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            });
            return;
        }

        AppState.set('editingTeamId', teamId);
        this.populateEditTeamForm(team);
        this.openModal('editTeamModal');
    }

    onEditTeamModalOpen() {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        const teamNameInput = document.getElementById('editTeamName');
        if (teamNameInput) {
            teamNameInput.focus();
        }
    }

    onEditTeamModalClose() {
        AppState.set('editingTeamId', null);
        this.clearEditTeamForm();
    }

    populateEditTeamForm(team) {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        const nameInput = document.getElementById('editTeamName');
        const sloganInput = document.getElementById('editTeamSlogan');
        
        if (nameInput) nameInput.value = team.name || '';
        if (sloganInput) sloganInput.value = team.slogan || '';

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        const playersContainer = document.getElementById('playersEditContainer');
        if (playersContainer) {
            playersContainer.innerHTML = '';
            (team.players || []).forEach(player => {
                this.addPlayerEditField(player.name, player.role, player.mmr);
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –µ—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
            if (team.players.length === 0) {
                this.addPlayerEditField();
            }
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.setupEditTeamFormEvents();
    }

    addPlayerEditField(name = '', role = '', mmr = 3000) {
        const container = document.getElementById('playersEditContainer');
        if (!container) return;

        const playerDiv = document.createElement('div');
        playerDiv.className = 'player-edit-row';
        playerDiv.innerHTML = `
            <input type="text" 
                   class="form-input player-name" 
                   placeholder="–ò–º—è –∏–≥—Ä–æ–∫–∞" 
                   value="${this.escapeHTML(name)}"
                   required>
            <input type="text" 
                   class="form-input player-role" 
                   placeholder="–†–æ–ª—å" 
                   value="${this.escapeHTML(role)}"
                   required>
            <input type="number" 
                   class="form-input player-mmr" 
                   placeholder="MMR" 
                   value="${mmr}"
                   min="0" 
                   max="10000"
                   required>
            <button type="button" 
                    class="btn btn--danger btn--sm remove-player"
                    aria-label="–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞">
                üóëÔ∏è
            </button>
        `;

        container.appendChild(playerDiv);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        const removeBtn = playerDiv.querySelector('.remove-player');
        if (removeBtn) {
            removeBtn.addEventListener('click', () => {
                if (container.children.length > 1) {
                    playerDiv.remove();
                } else {
                    ErrorHandler.showNotification({
                        type: 'warning',
                        title: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å',
                        message: '–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞'
                    });
                }
            });
        }
    }

    setupEditTeamFormEvents() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        this.addEventListener('addPlayerBtn', 'click', () => this.addPlayerEditField());

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        this.addEventListener('saveTeamBtn', 'click', (e) => {
            e.preventDefault();
            this.saveTeamChanges();
        });

        // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.addEventListener('cancelEditTeamBtn', 'click', () => {
            this.closeModal('editTeamModal');
        });
    }

    async saveTeamChanges() {
        const teamId = AppState.get('editingTeamId');
        if (!teamId) return;

        try {
            const formData = this.getEditTeamFormData();
            await teamsManager.updateTeam(teamId, formData);
            this.closeModal('editTeamModal');
            
        } catch (error) {
            ErrorHandler.showNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
                message: error.message
            });
        }
    }

    getEditTeamFormData() {
        const nameInput = document.getElementById('editTeamName');
        const sloganInput = document.getElementById('editTeamSlogan');
        const playersContainer = document.getElementById('playersEditContainer');

        const players = [];
        if (playersContainer) {
            playersContainer.querySelectorAll('.player-edit-row').forEach(row => {
                const name = row.querySelector('.player-name')?.value.trim();
                const role = row.querySelector('.player-role')?.value.trim();
                const mmr = parseInt(row.querySelector('.player-mmr')?.value) || 0;

                if (name && role) {
                    players.push({ name, role, mmr });
                }
            });
        }

        return {
            name: nameInput?.value.trim() || '',
            slogan: sloganInput?.value.trim() || '',
            players: players
        };
    }

    clearEditTeamForm() {
        const nameInput = document.getElementById('editTeamName');
        const sloganInput = document.getElementById('editTeamSlogan');
        const playersContainer = document.getElementById('playersEditContainer');

        if (nameInput) nameInput.value = '';
        if (sloganInput) sloganInput.value = '';
        if (playersContainer) playersContainer.innerHTML = '';
    }

    // === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===

    showAuthModal() {
        this.openModal('authModal');
    }

    onAuthModalOpen() {
        const passwordInput = document.getElementById('editorPassword');
        if (passwordInput) {
            passwordInput.value = '';
            passwordInput.focus();
        }

        this.setupAuthFormEvents();
    }

    onAuthModalClose() {
        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const passwordInput = document.getElementById('editorPassword');
        if (passwordInput) {
            passwordInput.value = '';
        }
    }

    setupAuthFormEvents() {
        this.addEventListener('confirmAuth', 'click', (e) => {
            e.preventDefault();
            this.handleAuth();
        });

        this.addEventListener('cancelAuth', 'click', () => {
            this.closeModal('authModal');
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
        const passwordInput = document.getElementById('editorPassword');
        if (passwordInput) {
            passwordInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    this.handleAuth();
                }
            });
        }
    }

    async handleAuth() {
        const passwordInput = document.getElementById('editorPassword');
        const password = passwordInput?.value;

        if (!password) {
            ErrorHandler.showNotification({
                type: 'warning',
                title: '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
                message: '–ü–æ–ª–µ –ø–∞—Ä–æ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            });
            return;
        }

        try {
            const isValid = await securityService.authenticate(password);
            if (isValid) {
                this.closeModal('authModal');
                this.updateAuthUI();
                ErrorHandler.showNotification({
                    type: 'success',
                    title: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
                    message: '–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
                });
            }
        } catch (error) {
            ErrorHandler.showNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞',
                message: error.message
            });
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (passwordInput) {
                passwordInput.value = '';
                passwordInput.focus();
            }
        }
    }

    updateAuthUI() {
        const adminBtn = document.getElementById('adminBtn');
        const connectionStatus = document.getElementById('connectionStatus');

        if (securityService.isAuthenticated) {
            if (adminBtn) adminBtn.classList.remove('hidden');
            if (connectionStatus) connectionStatus.classList.remove('hidden');
        } else {
            if (adminBtn) adminBtn.classList.add('hidden');
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–û–°–¢–£–ü–û–ú ===

    async generateAccessLink() {
        try {
            const durationSelect = document.getElementById('accessDuration');
            const durationHours = parseInt(durationSelect?.value) || 24;

            const accessData = await securityService.generateTemporaryAccess(durationHours);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
            const linkContainer = document.getElementById('generatedLinkContainer');
            const linkInput = document.getElementById('generatedLink');
            const expiresSpan = document.getElementById('linkExpires');

            if (linkContainer && linkInput && expiresSpan) {
                linkInput.value = accessData.link;
                expiresSpan.textContent = accessData.expiresAt;
                linkContainer.classList.remove('hidden');
            }

            ErrorHandler.showNotification({
                type: 'success',
                title: '–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞',
                message: `–î–æ—Å—Ç—É–ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ${durationHours} —á–∞—Å–æ–≤`
            });

        } catch (error) {
            ErrorHandler.showNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏',
                message: error.message
            });
        }
    }

    async copyAccessLink() {
        const linkInput = document.getElementById('generatedLink');
        if (!linkInput) return;

        try {
            await navigator.clipboard.writeText(linkInput.value);
            ErrorHandler.showNotification({
                type: 'success',
                title: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ',
                message: '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞'
            });
        } catch (error) {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            linkInput.select();
            document.execCommand('copy');
            ErrorHandler.showNotification({
                type: 'success',
                title: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ',
                message: '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞'
            });
        }
    }

    async changePassword() {
        const newPassword = document.getElementById('newPassword')?.value;
        const confirmPassword = document.getElementById('confirmPassword')?.value;

        if (!newPassword || !confirmPassword) {
            ErrorHandler.showNotification({
                type: 'warning',
                title: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è',
                message: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'
            });
            return;
        }

        if (newPassword !== confirmPassword) {
            ErrorHandler.showNotification({
                type: 'error',
                title: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
                message: '–í–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
            });
            return;
        }

        try {
            await securityService.changePassword(newPassword);
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
            document.getElementById('newPassword').value = '';
            document.getElementById('confirmPassword').value = '';

        } catch (error) {
            ErrorHandler.showNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è',
                message: error.message
            });
        }
    }

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    sortGroupTeams(teams) {
        return [...teams].sort((a, b) => {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ –ø–æ–±–µ–¥–∞–º/–ø–æ—Ä–∞–∂–µ–Ω–∏—è–º
            if (a.losses === 0 && b.losses !== 0) return -1;
            if (a.losses !== 0 && b.losses === 0) return 1;
            
            // –ó–∞—Ç–µ–º –ø–æ –æ—á–∫–∞–º
            const pointsA = a.points || 0;
            const pointsB = b.points || 0;
            
            if (pointsA !== pointsB) {
                return pointsB - pointsA;
            }
            
            // –ó–∞—Ç–µ–º –ø–æ —Ä–∞–∑–Ω–∏—Ü–µ –ø–æ–±–µ–¥/–ø–æ—Ä–∞–∂–µ–Ω–∏–π
            const diffA = (a.wins || 0) - (a.losses || 0);
            const diffB = (b.wins || 0) - (b.losses || 0);
            
            return diffB - diffA;
        });
    }

    createGroupTeamRow(team, index) {
        const matchesPlayed = (team.wins || 0) + (team.losses || 0);
        let rowClass = '';
        
        if (team.losses === 0 && team.wins > 0) {
            rowClass = 'undefeated';
        } else if (team.wins === 0 && team.losses > 0) {
            rowClass = 'eliminated';
        } else if (team.wins === team.losses) {
            rowClass = 'equal';
        }

        return `
            <div class="table-row ${rowClass}" role="row">
                <div class="team-name" role="cell">${this.escapeHTML(team.name)}</div>
                <div role="cell">${matchesPlayed}</div>
                <div role="cell">${team.wins || 0}</div>
                <div role="cell">${team.losses || 0}</div>
                <div class="points" role="cell">${team.points || 0}</div>
            </div>
        `;
    }

    isMatchLive(match) {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞
        // –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –º–∞—Ç—á–µ–π
        return match.time && new Date(match.time) <= new Date() && 
               !match.completed;
    }

    createErrorCard(message) {
        return `
            <div class="error-card card">
                <div class="error-icon">‚ö†Ô∏è</div>
                <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <p>${this.escapeHTML(message)}</p>
                <button class="btn btn--primary" onclick="location.reload()">
                    –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                </button>
            </div>
        `;
    }

    updateARIAForSection(sectionName) {
        // –û–±–Ω–æ–≤–ª—è–µ–º ARIA –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        const sections = document.querySelectorAll('.content-section');
        sections.forEach(section => {
            const isActive = section.id === `${sectionName}Content`;
            section.setAttribute('aria-hidden', !isActive);
            
            if (isActive) {
                section.setAttribute('tabindex', '0');
                section.focus();
            } else {
                section.removeAttribute('tabindex');
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        const navButtons = document.querySelectorAll('.nav-btn');
        navButtons.forEach(btn => {
            const isActive = btn.id === `${sectionName}Btn`;
            btn.setAttribute('aria-current', isActive ? 'page' : 'false');
        });
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ (–∑–∞–≥–ª—É—à–∫–∏)
    async applyTeamsCount() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥
        console.log('Applying teams count...');
    }

    async updateTeamsSettings() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–º–∞–Ω–¥
        console.log('Updating teams settings...');
    }

    async saveBracketChanges() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ç–∫–∏
        console.log('Saving bracket changes...');
    }

    async addScheduleMatch() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        console.log('Adding schedule match...');
    }

    async saveScheduleChanges() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        console.log('Saving schedule changes...');
    }

    async saveGroupStageSettings() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞
        console.log('Saving group stage settings...');
    }

    async deleteTeam(teamId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É?')) {
            return;
        }

        try {
            await teamsManager.deleteTeam(teamId);
        } catch (error) {
            ErrorHandler.showNotification({
                type: 'error',
                title: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è',
                message: error.message
            });
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –∏ –≤–∫–ª–∞–¥–æ–∫
    initializeDropdowns() {
        const dropdownBtn = document.getElementById('teamsDropdownBtn');
        if (dropdownBtn) {
            dropdownBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                const dropdown = dropdownBtn.closest('.dropdown');
                dropdown?.classList.toggle('active');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º ARIA –∞—Ç—Ä–∏–±—É—Ç—ã
                const isExpanded = dropdown?.classList.contains('active');
                dropdownBtn.setAttribute('aria-expanded', isExpanded);
            });
        }
    }

    initializeTabs() {
        // –ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-btn').forEach(tab => {
            tab.addEventListener('click', (e) => {
                const tabName = e.target.dataset.tab;
                this.switchTab(tabName);
            });
        });
    }

    switchTab(tabName) {
        // –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelectorAll('.tab-pane').forEach(pane => {
            pane.classList.remove('active');
        });

        const activeTab = document.querySelector(`[data-tab="${tabName}"]`);
        const activePane = document.getElementById(tabName);

        if (activeTab && activePane) {
            activeTab.classList.add('active');
            activePane.classList.add('active');
        }
    }

    async loadInitialUIData() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è UI
        try {
            const teams = teamsManager.getAllTeams();
            this.updateTeamsDropdown(teams);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å–µ–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (!this.currentSection) {
                this.showSection('teams');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö UI –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const uiManager = new UIManager();
export default UIManager;